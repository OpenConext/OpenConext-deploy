---
env: vm

smtp_server: localhost
error_mail_to: devnull@example.org

php_display_errors: 1

databases:
  names:
    - teams
    - api
    - "{{ engine_database_name }}"
    - "{{ janus_database_name }}"
    - grouper
    - authz-server
    - pdp-server
    - oidc-server
    - aaserver
  users:
    - { name: teamsrw, db_name: teams, password: "{{ mysql_passwords.teams }}" }
    - { name: apirw, db_name: api, password: "{{ mysql_passwords.api }}" }
    - { name: "{{ engine_database_user }}", db_name: "{{ engine_database_name }}", password: "{{ mysql_passwords.eb }}" }
    - { name: "{{ janus_database_user }}", db_name: "{{ janus_database_name }}", password: "{{ mysql_passwords.sr }}" }
    - { name: grouperrw, db_name: grouper, password: "{{ mysql_passwords.grouper }}" }
    - { name: authz-serverrw, db_name: authz-server, password: "{{ mysql_passwords.authz_server }}" }
    - { name: pdp-serverrw, db_name: pdp-server, password: "{{ mysql_passwords.pdp_server }}" }
    - { name: oidc-serverrw, db_name: oidc-server, password: "{{ mysql_passwords.oidc_server }}" }
    - { name: aa-serverrw, db_name: aaserver, password: "{{ mysql_passwords.aa_server }}" }
  development_user:
    - { name: development, password: development }

# on the VM we use the same certificate for all domains under base_domain.
tls_https:
  key_name: star.{{ base_domain }}.key
  crt_name: star.{{ base_domain }}.pem
  ca_name: star.{{ base_domain }}_ca.pem
  bundle_name: star.{{ base_domain }}_ca_bundle.pem

apache_server_admin: unix@prolocation.net

janus_ssp_technicalcontact_name: "Surfconext beheer"
janus_ssp_technicalcontact_email: "surfconext-beheer@surfnet.nl"
janus_ssp_managingcontact_name: "Surfconext beheer"
janus_ssp_managingcontact_email: "surfconext-beheer@surfnet.nl"


engine_idp_debugging_email_address: coin-logs-dev@list.surfnet.nl

# when using multiple certificates list them all (and their bundles) under tls.certificates
tls:
  cert_path: /etc/pki/tls/certs
  cert_private_path: /etc/pki/tls/private
  certificates:
    - "{{ tls_https.crt_name }}"
  private_keys:
    - "{{ tls_https.key_name }}"
  ca_certificates:
    - "{{ tls_https.ca_name }}"
engine_janus_user: engineblock

engine_database_name: eb
engine_database_host: localhost
engine_database_user: ebrw
engine_database_password: "{{ mysql_passwords.eb }}"

engine_ldap_host: localhost
engine_ldap_bind_dn: "cn=engine,dc=surfconext,dc=nl"
engine_apache_environment: vm
engine_apache_symfony_environment: dev

ldap_admin_user: cn=admin,dc=surfconext,dc=nl

ldap_grouper_user: gadget
grouper_ldap_host: localhost

janus_database_name: sr
janus_database_host: localhost
janus_database_user: srrw
janus_database_password: "{{ mysql_passwords.sr }}"

janus_teams_oauth_key: https://teams.{{ base_domain }}/.*

# host for static files (IdP logos)
static:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"

# the welcome page on: vm.{{ base_domain }}
welcome:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"

engine:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"

engine_api:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"

profile:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"

janus:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"

mujina_sp:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"

mujina_idp:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"


engine_janus_cache_lifetime: 0

engine_vovalidate_key: oauth_key

engine_trusted_proxy_ips:
  - 192.168.1.1
  - 10.0.0.1
#
engine_keys:
  default:
    privateFile: /etc/openconext/engineblock.pem
    publicKey: engineblock.crt
    publicFile: /etc/openconext/engineblock.crt

engine_block:
  metadataRepositories:
    - {
        index: 0,
        type: "database",
        value: "Doctrine"
      }
#    - {
#        index: 0,
#        type: "janus",
#        value: "JanusRestV1"
#      }

tomcat_apps:
  - grouper
  - mujina-sp
  - mujina-idp
  - oidc

# shibboleth
shibboleth_apps:
  teams:
    entityID: "https://teams.{{ base_domain }}/shibboleth"
    baseurl: ""
  grouper:
    entityID: "https://grouper.{{ base_domain }}/grouper/shibboleth"
    baseurl: "/grouper"
  authz:
    entityID: "https://authz.{{ base_domain }}/shibboleth"
    baseurl: ""
  "authz-admin":
    entityID: "https://authz-admin.{{ base_domain }}/shibboleth"
    baseurl: ""
  pdp:
    entityID: "https://pdp.{{ base_domain }}/shibboleth"
    baseurl: ""
  aa:
    entityID: "https://aa.{{ base_domain }}/shibboleth"
    baseurl: ""

shib:
  engine_domain: "{{ base_domain }}"

api_version: 4.0.1
#api_snapshot_timestamp

mujina_version: 4.0.2
#mujina_snapshot_timestamp

##
# VM config for the teams app
##
teams:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"
  db_name: "teams"
  db_user: "teamsrw"
  db_password: "{{ mysql_passwords.teams }}"
  db_host: "{{ mysql_host }}"
  group_name_context: "urn:collab:group:demo.openconext.org:"
  rollbar_apiKey: "{{ teams_rollbar_apiKey }}"

teams_version: 4.2.1
# teams_snapshot_timestamp: 20150519.080724-3
teams_debug: true

engineblock:
  idp_url: https://engine.{{ base_domain }}/authentication/idp/single-sign-on
  idp_entity_id: https://engine.{{ base_domain }}/authentication/idp/metadata

##
# VM config for the api app
##
api:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"
  bundle_name: "{{ tls_https.bundle_name }}"
  janus:
    user: "{{ engine_janus_user }}"
    secret: "{{ engine_janus_secret }}"
    uri: https://serviceregistry.{{ base_domain }}/simplesaml/module.php/janus/services/rest/
  jdbc:
    user: apirw
    url: jdbc:mysql://{{ mysql_host }}:3306/api
    password: "{{ mysql_passwords.api }} "
  ldap:
    url: ldap://ldap.{{ base_domain }}:389
    userDn: "{{ engine_ldap_bind_dn }}"
    password: "{{ engine_ldap_password }}"
  engineblock:
    user: "{{ engine_database_user }}"
    url: jdbc:mysql://{{ engine_database_host }}:3306/{{ engine_database_name }}
    password: "{{ engine_database_password }}"
  teams:
    user: teamsrw
    url: jdbc:mysql://{{ mysql_host }}:3306/teams
    password: "{{ mysql_passwords.teams }}"
  oauth:
    callback_url: https://api.{{ base_domain }}/v1/test/oauth-callback.shtml
  staticContentBasePath: https://static.{{ base_domain }}
  saml:
    entityId: https://api.{{ base_domain }}/
    assertionConsumerURI: https://api.{{ base_domain }}/v1/assertionConsumer
  ehcache:
    path: /tmp

##
# VM config for the grouper app
##
grouper:
  db_user: grouperrw
  db_host: "{{ mysql_host }}"
  db_password: "{{ mysql_passwords.grouper }}"
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"


ldap_user: cn=ro,dc=surfconext,dc=nl
ldap_grouper_engine_user: engine

mujina_idp:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"

mujina_sp:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"

##
# VM config for the Authorization Server
##
authzserver:
  db_user: authz-serverrw
  db_password: "{{ mysql_passwords.authz_server }}"
  db_host: "{{ mysql_host }}"
  db_name: authz-server
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"
  rollbar_apiKey: "{{ authz_server_rollbar_apiKey }}"

authz_server_version: 1.2
#authz_server_snapshot_timestamp: 20150429.085158-60
authz_server_debug: true

##
# VM config for the Voot app
##
voot:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"
  authz_checkToken_endpoint_url: "https://authz.{{ base_domain }}/oauth/check_token"
  authz_checkToken_clientId: "vootservice"
  authz_checkToken_secret: "{{ voot_authz_checkToken_secret }}"
  oidc_checkToken_endpoint_url: "https://oidc.{{ base_domain }}/introspect"
  oidc_checkToken_clientId: "https@//oidc.{{ base_domain }}"
  oidc_checkToken_secret: "{{ voot_oidc_checkToken_secret }}"
  externalGroupProviders:
    - {
        type: "grouper",
        url: "https://grouper.{{ base_domain }}/grouper-ws/services/GrouperService_v2_0",
        credentials: {
          username: "{{ ldap_grouper_user }}",
          secret: "{{ external_group_provider_secrets.grouper }}"
        },
        schacHomeOrganization: "surfnet.nl",
        name: "SURFteams",
        timeoutMillis: 3000
      }
voot_version: 1.5
#voot_snapshot_timestamp: ""
voot_debug: true
voot_resource_checking_secret: secret

##
# VM config for the authz-admin application
##
authz_admin_version: 1.3.3
#authz_admin_snapshot_timestamp: 20150422.113215-61
authz_admin_group: "{{ teams.group_name_context }}org:openconext:teams:managementvo"
authz_admin_debug: true
authzadmin:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"
  defaultClients:
      - clientId: "{{ authzplayground.springapp_authz_client_id }}"
        secret: "{{ authzplayground.springapp_authz_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
        grantTypes:
          - authorization_code
          - implicit
          - client_credentials
        redirectUri: https://authz-playground.{{ base_domain }}/redirect
      - clientId: authz-admin
        secret: "{{ authz_admin_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
        grantTypes:
          - authorization_code
        redirectUri: https://authz-admin.{{ base_domain }}
        autoApprove: true
      - clientId: surf-teams
        secret: "{{ teams_authz_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
        grantTypes:
          - client_credentials
      - clientId: engineblock
        secret: "{{ engineblock_authz_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
        grantTypes:
          - client_credentials
      - clientId: csa_client
        secret: "{{ csa_authz_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
        grantTypes:
          - client_credentials
      - clientId: dashboard
        secret: "{{ dashboards_authz_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
          - actions
          - cross-idp-services
          - stats
        grantTypes:
          - authorization_code
          - implicit
          - client_credentials
      - clientId: pdp_client
        secret: "{{ pdp_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
        grantTypes:
          - authorization_code
          - implicit
          - client_credentials
      - clientId: "{{ aa.authz_client_id }}"
        secret: "{{ aa_authz_client_secret }}"
        scopes:
          - groups
          - attribute-aggregation
          - saml-attribute-query
        grantTypes:
          - authorization_code
          - implicit
          - client_credentials
  defaultResourceServers:
    - clientId: vootservice
      secret: "{{ voot.authz_checkToken_secret }}"
    - clientId: csa
      secret: "{{ csa_resource_checking_secret }}"
    - clientId: pdp
      secret: "{{ voot.oidc_checkToken_secret }}"
    - clientId: "{{ aa.authz_resource_server_id }}"
      secret: "{{ aa.authz_secret }}"

##
# VM config for the authz-admin application
##
authz_playground_version: 1.2
authz_playground_snapshot_timestamp: "20160204.074458-4"
authz_playground_debug: true
authzplayground:
  springapp_authz_client_id: cool_app_id
  springapp_authz_client_secret: "{{ authzplayground_springapp_authz_client_secret }}"
  springapp_oidc_client_id: https@//oidc.{{ base_domain }}
  springapp_oidc_client_secret: "{{ authzplayground_springapp_oidc_client_secret }}"
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"
  rollbar_apiKey: "{{ authzplayground_rollbar_apiKey }}"

pdp_version: "1.0.2"
#pdp_snapshot_timestamp: "20151222.101918-28"
#pdp_html_snapshot_timestamp: "20151222.102014-26"
pdp_debug: true
pdp:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"
  username: "pdp_admin"
  password: "{{ pdp_password }}"
  db_user: pdp-serverrw
  db_password: "{{ mysql_passwords.pdp_server }}"
  db_host: "{{ mysql_host }}"
  db_name: pdp-server
  spring_profiles_active: test
  cache_policies: false
  include_inactive_policies: true
  sab_username: coin-test
  sab_password: "{{ pdp_sab_password }}"
  sab_endpoint: https://sab-ng.surfnet.nl/simplesaml/module.php/attributes/server.php
  rollbar_environment: dev
  springapp_rollbar_apiKey: "should not matter for a dev env"
  rollbar_apiKey: "should not matter for a dev env"

aa_version: "0.1"
aa_snapshot_timestamp: "20160120.123738-7"
aa_html_snapshot_timestamp: "20160120.154538-10"

aa_debug: true
aa:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"
  eb_username: "eb"
  eb_password: "{{ aa_eb_password }}"
  db_user: aa-serverrw
  db_password: "{{ mysql_passwords.aa_server }}"
  db_host: "{{ mysql_host }}"
  db_name: aaserver
  authz_client_id: "https@//aa.test.surfconext.nl"
  authz_resource_server_id: aa
  authz_secret: "{{ aa_authz_client_secret }}"
  oidc_client_id: "https@//aa.surfconext.test.nl"
  oidc_secret: "{{ aa_oidc_client_secret }}"
  spring_profiles_active: acc
  sab_username: coin-test
  sab_password: "{{ aa_sab_password }}"
  sab_endpoint: https://sab-ng.surfnet.nl/simplesaml/module.php/attributes/server.php
  rollbar_environment: test
  rollbar_apiKey: "{{ aa_rollbar_apiKey }}"

oidc_version: "0.1"
oidc_snapshot_timestamp: "20160216.122343-18"
oidc:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"
  environment: vm
  issuer: https://oidc.{{ base_domain }}/
  db_user: oidc-serverrw
  db_password: "{{ mysql_passwords.oidc_server }}"
  db_host: "{{ mysql_host }}"
  db_name: oidc-server
  sp_entity_id: https://oidc.{{ base_domain }}

metadata_exporter_version: "0.1"
metadata_exporter_snapshot_timestamp: "20160208.084759-3"
metadata_exporter:
  crt_name: "{{ tls_https.crt_name }}"
  key_name: "{{ tls_https.key_name }}"
  db_user: srrw
  db_password: "{{ mysql_passwords.sr }}"
  db_host: "{{ mysql_host }}"
  db_name: sr
  password: "{{ metadata_exporter_password }}"

loadbalancing:
  engine: {
    port: 401,
    heartbeat: { url: "/", method: "GET" },
    servers: [
      { label: "engine_backend", ip: "192.168.66.79" },
    ]
  }
  profile: {
    port: 402,
    heartbeat: { url: "/favicon.ico", method: "HEAD" },
    servers: [
      { label: "profile_backend", ip: "192.168.66.79" }
    ]
  }
  static: {
    port: 403,
    heartbeat: { url: "/media/alive.txt", method: "HEAD" },
    servers: [
      { label: "static_backend", ip: "192.168.66.79" },
    ]
  }
  serviceregistry: {
      port: 404,
      heartbeat: { url: "/", method: "HEAD" },
      servers: [
        { label: "serviceregistry_backend", ip: "192.168.66.79" },
    ]
  }
  engine_api: {
      port: 405,
      heartbeat: { url: "/", method: "GET" },
      servers: [
        { label: "engine_backend", ip: "192.168.66.79" },
      ]
    }
  teams: {
    port: 601,
    heartbeat: { url: "/media/trans-white.png", method: "GET" },
    servers: [
      { label: "teams_backend", ip: "192.168.66.79" },
    ]
  }
  authzserver: {
    port: 602,
    heartbeat: { url: "/health", method: "GET" },
    servers: [
      { label: "authz_backend", ip: "192.168.66.79" },
    ]
  }
  authz_admin: {
    port: 603,
    heartbeat: { url: "/health", method: "GET" },
    servers: [
      { label: "authz_admin_backend", ip: "192.168.66.79" }
    ]
  }
  authz_playground: {
    port: 604,
    heartbeat: { url: "/health", method: "GET" },
    servers: [
      { label: "authz_playground_backend", ip: "192.168.66.79" },
    ]
  }
  voot: {
    port: 605,
    heartbeat: { url: "/health", method: "GET" },
    servers: [
      { label: "voot_backend", ip: "192.168.66.79" },
    ]
  }
  grouper: {
    port: 606,
    heartbeat: { url: "/grouper/", method: "HEAD" },
    servers: [
      { label: "grouper_backend", ip: "192.168.66.79" },
    ]
  }
  mujina_sp: {
    port: 607,
    heartbeat: { url: "/", method: "HEAD" },
    servers: [
      { label: "mujina_sp_backend", ip: "192.168.66.79" },
    ]
  }
  mujina_idp: {
      port: 608,
      heartbeat: { url: "/", method: "HEAD" },
      servers: [
        { label: "mujina_idp_backend", ip: "192.168.66.79" },
    ]
  }
  welcome: {
      port: 609,
      heartbeat: { url: "/", method: "GET" },
      servers: [
        { label: "welcome_backend", ip: "192.168.66.79" },
    ]
  }
  oidc: {
    port: 10614,
    heartbeat: { url: "/", method: "HEAD" },
    servers: [
      { label: "oidc_backend", ip: "192.168.66.79" },
    ]
  }
  pdp: {
      port: 613,
      heartbeat: { url: "/pdp/api/health", method: "GET" },
      servers: [
        { label: "pdp_backend", ip: "192.168.66.79" },
      ]
    }
  aa: {
    port: 615,
    heartbeat: { url: "/aa/api/health", method: "GET" },
    servers: [
      { label: "aa_backend", ip: "192.168.66.79" },
    ]
  }
  metadata_exporter: {
    port: 616,
    heartbeat: { url: "/health", method: "GET" },
    servers: [
      { label: "metadata_exporter_backend", ip: "192.168.66.79" },
    ]
  }

nginx_backend_ip: 127.0.0.1

# values below seem silly but on acc+prod these differ.
nginx_ipv4_addresses:
  engine: 192.168.66.78
  engine_api: 192.168.66.78
  profile: 192.168.66.78
  serviceregistry: 192.168.66.78
  static: 192.168.66.78
  teams: 192.168.66.78
  authzserver: 192.168.66.78
  authz_admin: 192.168.66.78
  authz_playground: 192.168.66.78
  voot: 192.168.66.78
  grouper: 192.168.66.78
  mujina_sp: 192.168.66.78
  mujina_idp: 192.168.66.78
  welcome: 192.168.66.78
  pdp: 192.168.66.78
  oidc: 192.168.66.78
  aa: 192.168.66.78
  metadata_exporter: 192.168.66.78

nginx_config_templates:
  - welcome
  - mujina_sp
  - mujina_idp
  - engine
  - engine_api
  - teams
  - grouper
  - voot
  - authz
  - authz_admin
  - authz_playground
  - static
  - profile
  - pdp
  - serviceregistry
  - oidc
  - aa
  - metadata_exporter
