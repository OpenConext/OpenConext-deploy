filter {

  # Parse stepup-authentication channel messages generated by the gateway.
  # See: https://github.com/SURFnet/Stepup-Gateway/blob/develop/src/Surfnet/StepupGateway/GatewayBundle/Monolog/Logger/AuthenticationLogger.php
  # The gateway logs these using the flat format of the gateway.monolog.gelf_to_string_formatter

  if [origin] == "stepup" and [program] == "stepup-authentication" {

    # Parse JSON into stepup_json
    json {
      source => "message"
      target => "json"
    }

    if "_jsonparsefailure" not in [tags] {

      # stepup_request_id: A random ID generated by stepup applications for correlating API calls belonging
      #                    to the same client HTTP request, unrelated to SAML RequestID
      #                    Used in X-Stepup-Request-Id HTTP header
      #                    See: https://github.com/SURFnet/Stepup-bundle/blob/develop/src/Request/RandomRequestIdGenerator.php
      #                         https://github.com/SURFnet/Stepup-bundle/blob/develop/src/EventListener/RequestIdRequestResponseListener.php
      #
      # stepup_sari: The SAML Request ID from the SAML AuthenticationRequest from the SP.
      #

      # The "%{[json][some_field]}" syntax gets the value of "some_field" from the "json" array (created by the json filter plugin above)
      # When "some_field" does not exists, "%{[json][some_field]}" returns the literal string "%{[json][some_field]}". To prevent that
      # from happening we need to test for the existance of the field first.
      #     if [json][some_field] {
      #         mutate { replace => { "target_field" => "%{[json][some_field]}"  } }
      #     }

      if [json][short_message] {
        mutate { replace => { "message" => "%{[json][short_message]}"  } }
      }
      if [json][_request_id] {
        mutate { replace => { "stepup_request_id" => "%{[json][_request_id]}"  } }
      }
      if [json][_ctxt_sari] {
        mutate { replace => { "stepup_sari" => "%{[json][_ctxt_sari]}"  } }
      }
      if [json][_ctxt_authenticating_idp] {
        mutate { replace => { "idp" => "%{[json][_ctxt_authenticating_idp]}"  } }
      }
      if [json][_ctxt_requesting_sp] {
        mutate { replace => { "sp" => "%{[json][_ctxt_requesting_sp]}"  } }
      }
      if [json][_ctxt_identity_id] {
        mutate { replace => { "nameid" => "%{[json][_ctxt_identity_id]}"  } }
      }
      if [json][_ctxt_authentication_result] {
        mutate { replace => { "result" => "%{[json][_ctxt_authentication_result]}"  } }
      }
      if [json][_ctxt_second_factor_id] {
        mutate { replace => { "second_factor_id" => "%{[json][_ctxt_second_factor_id]}"  } }
      }
      if [json][_ctxt_second_factor_type] {
        mutate { replace => { "second_factor_type" => "%{[json][_ctxt_second_factor_type]}"  } }
      }
      if [json][_ctxt_institution] {
        mutate { replace => { "institution" => "%{[json][_ctxt_institution]}"  } }
      }
      if [json][timestamp] {
        date { match => [ "[json][timestamp]" , "UNIX" ] }
      }
      mutate { replace => { "severity" => "informational" } }
      mutate { remove_field => "json" }

    }

  }

}
