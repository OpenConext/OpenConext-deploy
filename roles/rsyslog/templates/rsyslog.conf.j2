# rsyslog configuration file

# For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html
# If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html

#### MODULES ####
$MaxMessageSize 32k
# The imjournal module below is now used as a message source instead of imuxsock.
$ModLoad imuxsock # provides support for local system logging (e.g. via logger command)
$ModLoad imjournal # provides access to the systemd journal
#$ModLoad imklog # reads kernel messages (the same are read from journald)
$ModLoad immark  # provides --MARK-- message capability

## Adjust Ratelimit
$imjournalRatelimitInterval 30
$imjournalRatelimitBurst 20000

#### GLOBAL DIRECTIVES ####

# Where to place auxiliary files
$WorkDirectory /var/lib/rsyslog

# Use default timestamp format
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

# File syncing capability is disabled by default. This feature is usually not required,
# not useful and an extreme performance hit
#$ActionFileEnableSync on

# Turn off message reception via local log socket;
# local messages are retrieved through imjournal now.
$OmitLocalLogging on

# File to store the position in the journal
$IMJournalStateFile imjournal.state
# MARK messages
$ActionWriteAllMarkMessages on
$MarkMessagePeriod 600

$PreserveFQDN on
# Order is important here: First the templates, then rules, then listerers, then forwarders 
{% if 'sysloghost' in group_names %}
# This directory contains templates for a central syslog host
$IncludeConfig /etc/rsyslog.d/templates/*.conf
{% endif %}

#### RULES ####
# The rules below make sure all local logging is also logged on local machines
# Log all kernel messages to the console.
# Logging much else clutters up the screen.
#kern.*                                                 /dev/console

# Log anything (except mail) of level info or higher.
# Don't log private authentication messages!
*.info;mail.none;authpriv.none;cron.none                /var/log/messages

# The authpriv file has restricted access.
authpriv.*                                              /var/log/secure

# Log all the mail messages in one place.
mail.*                                                  -/var/log/maillog
# Log cron stuff
cron.*                                                  /var/log/cron

# Everybody gets emergency messages
*.emerg                                                 :omusrmsg:*

# Save news errors of level crit and higher in a special file.
uucp,news.crit                                          /var/log/spooler

# Save boot messages also to boot.log
local7.*                                                /var/log/boot.log

{% if 'sysloghost' in group_names %}
# Make the logs readable
$DirCreateMode 0775
$FileCreateMode 0640
$FileOwner root
$FileGroup {{ rsyslog_read_group }}
$DirOwner root
$DirGroup root

# This directory contains all rulesets on the central syslog host
$IncludeConfig /etc/rsyslog.d/rulesets/*.conf
{% endif %}
# Default listener for localhost
module(load="imudp")
input(type="imudp" port="514")


{% if 'sysloghost' in group_names %}
# Now we include all the listeners
module(load="imrelp" )
$IncludeConfig /etc/rsyslog.d/listeners/*.conf
{% endif %}

# ### begin forwarding rule ###
# The statement between the begin ... end define a SINGLE forwarding
# rule. They belong together, do NOT split them. If you create multiple
# forwarding rules, duplicate the whole block!
# Remote Logging (we use TCP for reliable delivery)
#

{% if rsyslog_remote_server_relp is defined and 'sysloghost' not in group_names %}
# Forward all logs to the central logging server using relp
module(load="omrelp")
action(type="omrelp" 
target="{{ rsyslog_remote_server_relp }}" 
port="{{ rsyslog_remote_relp_port }}" 
tls="on" 
tls.caCert="/etc/pki/rsyslog/rsyslogclientca.crt" 
tls.MyCert="/etc/pki/rsyslog/rsyslogclient.crt"
tls.MyPrivKey="/etc/pki/rsyslog/rsyslogclient.key"
tls.authmode="name" 
tls.permittedpeer=["{{ rsyslog_remote_server_relp }}"]
queue.type="LinkedList" 
queue.filename="rsyslog_relp_q"
queue.maxdiskspace="1G"
queue.saveonshutdown="on" 
action.resumeRetryCount="-1"
action.resumeInterval="5")
{% endif %}



