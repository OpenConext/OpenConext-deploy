---
- name: Create directory to keep configfile
  ansible.builtin.file:
    dest: "/opt/openconext/invite"
    state: directory
    owner: root
    group: root
    mode: "0770"

- name: Place the serverapplication configfiles
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /opt/openconext/invite/{{ item }}
    owner: root
    group: root
    mode: "0644"
  with_items:
    - serverapplication.yml
  notify: restart inviteserver

- name: Copy private key for manage secrets encryption
  ansible.builtin.copy:
    content: "{{ invite_private_key_pkcs8 }}"
    dest: /opt/openconext/invite/private_key_pkcs8.pem
    owner: "root"
    group: root
    mode: "0740"
  notify: restart inviteserver

- name: Copy certificate for manage secrets encryption
  ansible.builtin.copy:
    src: "{{ inventory_dir }}/files/certs/invite/public_key.pem"
    dest: /opt/openconext/invite/public_key.pem
    owner: "root"
    group: root
    mode: "0740"
  notify: restart inviteserver

- name: Place the mockapplication configfiles
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /opt/openconext/invite/{{ item }}
    owner: root
    group: root
    mode: "0644"
  with_items:
    - mockapplication.yml
  when: invite_mock_install
  notify: restart inviteprovisioningmock

- name: Add the MariaDB docker network to the list of networks when MariaDB runs in Docker
  ansible.builtin.set_fact:
    invite_docker_networks:
      - name: loadbalancer
      - name: openconext_mariadb
  when: mariadb_in_docker | default(false) | bool

- name: Create and start the server container
  community.docker.docker_container:
    name: inviteserver
    env:
      TZ: "{{ timezone }}"
    image: ghcr.io/openconext/openconext-invite/inviteserver:{{ invite_server_version }}
    pull: true
    restart_policy: "always"
    state: started
    networks: "{{ invite_docker_networks }}"
    mounts:
      - source: /opt/openconext/invite/serverapplication.yml
        target: /application.yml
        type: bind
      - source: /opt/openconext/invite/private_key_pkcs8.pem
        target: /private_key_pkcs8.pem
        type: bind
      - source: /opt/openconext/invite/public_key.pem
        target: /public_key.pem
        type: bind
    command: '-Xmx256M --spring.config.location=./'
    etc_hosts:
      host.docker.internal: host-gateway
    healthcheck:
      test: ["CMD", "wget", "-no-verbose",  "--tries=1",  "--spider", "http://localhost:8080/internal/health" ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
  register: inviteservercontainer

- name: Create the client container
  community.docker.docker_container:
    name: inviteclient
    image: ghcr.io/openconext/openconext-invite/inviteclient:{{ invite_client_version }}
    pull: true
    restart_policy: "always"
    state: started
    networks:
      - name: "loadbalancer"
    labels:
      traefik.http.routers.inviteclient.rule: "Host(`invite.{{ base_domain }}`)"
      traefik.http.routers.inviteclient.tls: "true"
      traefik.enable: "true"
    healthcheck:
      test: ["CMD", "curl", "--fail" , "http://localhost"  ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    mounts:
      - source: /etc/localtime
        target: /etc/localtime
        type: bind
    env:
      HTTPD_CSP: "{{ httpd_csp.strict_with_static_img }}"

- name: Create the welcome container
  community.docker.docker_container:
    name: invitewelcome
    image: ghcr.io/openconext/openconext-invite/invitewelcome:{{ invite_welcome_version }}
    pull: true
    restart_policy: "always"
    state: started
    networks:
      - name: "loadbalancer"
    labels:
      traefik.http.routers.invitewelcome.rule: "Host(`welcome.{{ base_domain }}`)"
      traefik.http.routers.invitewelcome.tls: "true"
      traefik.enable: "true"
    healthcheck:
      test: ["CMD", "curl", "--fail" , "http://localhost"  ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    mounts:
      - source: /etc/localtime
        target: /etc/localtime
        type: bind
    env:
      HTTPD_CSP: "{{ httpd_csp.strict_with_static_img }}"


- name: Create and start the mock provisioning container
  community.docker.docker_container:
    name: inviteprovisioningmock
    image: ghcr.io/openconext/openconext-invite/inviteprovisioningmock:{{ invite_mock_version }}
    pull: true
    restart_policy: "always"
    state: started
    command: '-Xmx256m --spring.config.location=./'
    mounts:
      - source: /opt/openconext/invite/mockapplication.yml
        target: /application.yml
        type: bind
      - source: /etc/localtime
        target: /etc/localtime
        type: bind
    networks: "{{ invite_docker_networks }}"
    labels:
      traefik.http.routers.invitemock.rule: "Host(`mock.{{ base_domain }}`)"
      traefik.http.routers.invitemock.tls: "true"
      traefik.http.services.invitemock.loadbalancer.server.port: "8081"
      traefik.enable: "true"
    healthcheck:
      test: ["CMD", "wget", "-no-verbose",  "--tries=1",  "--spider", "http://localhost:8081/internal/health" ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
  when: invite_mock_install

- name: Include the role manage_provision_entities to provision invite client to Manage
  ansible.builtin.include_role:
    name: manage_provision_entities
  vars:
    entity_type: oidc10_rp

- name: Include the role manage_provision_entities to provision invite client to Manage
  ansible.builtin.include_role:
    name: manage_provision_entities
  vars:
    entity_type: oauth20_rs
