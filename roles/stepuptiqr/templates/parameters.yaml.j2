parameters:
{% if 'docker' in group_names %}
    app_env: prod
    app_debug: false
    app_secret: {{ tiqr_secret }}
{% endif %}

    correlation_id_salt: {{ tiqr_correlation_id_salt }}

    # All locales supported by the application
    locales: [{{ enabled_locales | join(",") }}]

    # SAML configuration
    saml_idp_publickey: '{{ current_release_config_file_dir_name_in_config }}/cert.pem'
    saml_idp_privatekey: '{{ current_release_config_file_dir_name_in_config }}/key.pem'
    # NOTE: same key used for metadata and response/assertion signing
    saml_metadata_publickey: '{{ current_release_config_file_dir_name_in_config }}/cert.pem'
    saml_metadata_privatekey: '{{ current_release_config_file_dir_name_in_config }}/key.pem'

    saml_remote_sp_entity_id: 'https://{{ gateway_vhost_name }}/gssp/tiqr/metadata'
    saml_remote_sp_certificate: '{{ current_release_config_file_dir_name_in_config }}/gateway.crt'
    saml_remote_sp_acs: 'https://{{ gateway_vhost_name }}/gssp/tiqr/consume-assertion'

    base_url: 'https://{{ vhost_name }}'
    tiqr_identity: {{ vhost_name }}

    use_firebase_fallback_for_gcm: true

    # View parameters
    support_url:
{% for locale, url in tiqr_support_url.items() %}
        {{ locale }}: "{{ url | replace('%', '%%') }}"
{% endfor %}

    mobile_app_user_agent_pattern: "/^.*$/"

    # Whether the trusted_device cookie is checked
    # The cookies is always set when appropriate
    trusted_device_enforcement_enabled: false

    # The lifetime of the trusted device in seconds
    # For example, 30 days is 2592000 seconds
    trusted_device_cookie_lifetime: 2592000

    # The name used for the trusted-device cookies
    trusted_device_cookie_name: tiqr-trusted-device

    # The same_site attribute of the trusted-device cookies
    # Should be one of the strings in: \Surfnet\Tiqr\Service\TrustedDevice\Http\CookieSameSite: 'none', 'lax', 'strict'
    trusted_device_cookie_same_site: 'strict'

    # The secret key is used for the authenticated encryption (AE) of the trusted-device cookies, it is stored in the
    # parameters.yaml of Stepup-Tiqr. This secret may only be used for the AE of the trusted device cookies.
    #   The secret key size is fixed, it must be 256 bits (32 bytes (64 hex digits))
    #   We use hex encoding to store the key in the configuration, so the key will be 64 hex digits long
    # Please use this encryption key only for this purpose, do not re-use it for other crypto work.
    #
    # Example value: 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f
    trusted_device_encryption_key: {{ tiqr_trusted_device_encryption_key }}

    # Options for the tiqr library
    tiqr_library_options:
        general:
            identifier: '%tiqr_identity%'
            # The name of the service that uses tiqr for second factor authentication.
            # Used by both the TiqrService and the legacy Tiqr_Service during enrollment and when sending an
            # authentication notification.
            name: '{{ tiqr_info_name }}'
            auth_protocol: 'tiqrauth'
            enroll_protocol: 'tiqrenroll'
            ocra_suite: 'OCRA-1:HOTP-SHA1-6:QH10-S'
            logoUrl: '%base_url%/images/header-logo.png'
            infoUrl: '{{ tiqr_info_url }}'
        library:
          gcm:
            apikey: '{{ tiqr_gcm_apikey  }}'
            application: 'nl.surfnet.authenticator'
          firebase:
            projectId: '{{ tiqr_firebase_projectid }}'
            credentialsFile: '{{ current_release_config_file_dir_name_in_config }}/{{ tiqr_firebase_credentialsfile }}'
            cacheTokens: {{ tiqr_firebase_cachetokens }}
            tokenCacheDir: '/tmp'
          apns:
            certificate: '{{ current_release_config_file_dir_name_in_config }}/apns.pem'
            environment: production
        accountblocking:
            maxAttempts: 5
            # temporarilyBlockDuration:
            # maxTemporarilyBlocks:
        storage:
            statestorage:
{% if tiqr_statestorage is defined and tiqr_statestorage == 'pdo' %}
              type: 'pdo'
              arguments:
                table: 'tiqrstate'
                dsn: 'mysql:host={{ tiqr_db_host }};dbname={{ database_tiqr_name }}'
                username: '{{ database_tiqr_user }}'
                password: '{{ mysql_passwords.tiqr }}'
                cleanup_probability: {{ tiqr_pdo_cleanup_probability | default(0.1) }}

{% else %}
              type: 'memcache'
              arguments:
                prefix: 'tiqr_'
                servers:
                  - host: '{{ memcache_lb_address }}'
{% endif %}
            userstorage:
              type: 'pdo'
              arguments:
                table: 'user'
                dsn: 'mysql:host={{ tiqr_db_host }};dbname={{ database_tiqr_name }}'
                username: '{{ database_tiqr_user }}'
                password: '{{ mysql_passwords.tiqr }}'
            devicestorage:
              type: 'tokenexchange'
              arguments:
                url: 'https://tx.tiqr.org/tokenexchange/'
                appid: 'tiqr'
            usersecretstorage:
{% if tiqr_oathserviceclient is defined and tiqr_oathserviceclient is sameas true %}
              type: 'oathserviceclient'
              arguments:
                apiURL: 'https://{{ keyserver_vhost_name }}'
                consumerKey: '{{ keyserver_consumerkey  }}'
{% else %}
              type: 'pdo'
              # Use PDO config from userstorage
              arguments:
                table: 'user'
                dsn: 'mysql:host={{ tiqr_db_host }};dbname={{ database_tiqr_name }}'
                username: '{{ database_tiqr_user }}'
                password: '{{ mysql_passwords.tiqr }}'
{% endif %}
