#jinja2: lstrip_blocks: True
## Frontend configuration

#--------------------------------------------------------------------
#  frontend public ips
# -------------------------------------------------------------------
frontend internet_ip

    bind {{ haproxy_sni_ip.ipv4 }}:443 ssl{% for certs in haproxy_sni_ip.certs %} crt /etc/pki/haproxy/{{ certs.name }}_haproxy.pem {% endfor %} no-sslv3{% if haproxy_disable_tls10_and_11 | default(True) %} no-tlsv10 no-tlsv11 {% endif %} alpn h2,http/1.1 transparent 
    bind {{ haproxy_sni_ip.ipv6 }}:443 ssl{% for certs in haproxy_sni_ip.certs %} crt /etc/pki/haproxy/{{ certs.name }}_haproxy.pem {% endfor %} no-sslv3{% if haproxy_disable_tls10_and_11 | default(True) %} no-tlsv10 no-tlsv11 {% endif %} alpn h2,http/1.1 transparent 
    bind {{ haproxy_sni_ip.ipv4 }}:80 transparent
    bind {{ haproxy_sni_ip.ipv6 }}:80 transparent
    # Logging is done in the local_ip backend, otherwise all requests are logged twice
    no log
    # We add the X-Forward-For header here
    option forwardfor except 127.0.0.0/8
    # Rewrite requests
    # We want to log the tls cipher, tls protocol and the http version
    http-request add-header X-TLS-Client %[ssl_fc_cipher],%[ssl_fc_protocol],%[ssl_fc_alpn]
    # First we strip any Proxy or X-Forwarded-for headers
    http-request del-header Proxy
    http-request del-header X-Forwarded-For
    # We redirect all port 80 to port 443
    http-request redirect scheme https code 301 if !{ ssl_fc }
    # Log the user agent in the httplogs
    capture request header User-agent len 256
    # Put the useragent header in a variable, shared between request and response. 
    http-request set-var(txn.useragent) req.fhdr(User-Agent)
    # The ACL below makes sure only supported http methods are allowed
    acl valid_method method {{ haproxy_supported_http_methods }}
    http-request deny deny_status 405 if !valid_method
    # Create ACLs to make samesite=origin execeptions for unsupported browsers
    # See https://www.chromium.org/updates/same-site/incompatible-clients
    acl no_same_site_uas var(txn.useragent) -m reg -f /etc/haproxy/maps/nosamesitebrowsers.lst
    # ACL to protect APIs of public vhosts
    acl internal src -f /etc/haproxy/acls/internalips.acl
    # Deny the requests to internal APIs from IP addresses that are not on the internal ips list
    # Access to /internal/groups is for VOOT access and is allowed from anywhere
    http-request deny if { path -m beg /internal/ } !{ path -m beg /internal/groups } !internal
    # Rewrite responses
    # Set HSTS on all outgoing responses
    http-response set-header Strict-Transport-Security {{ haproxy_hsts_value }}
    # Add samesite=none to all outgoing cookies except for unsupported browsers,
    # or when the SameSite cookie attribute is already present
    http-response replace-header Set-Cookie (?i)(^(?!.*samesite).*$) \1;\ SameSite=None if !no_same_site_uas
    # Remove an already present SameSite cookie attribute for unsupported browsers
    http-response replace-value Set-Cookie (^.*)(?i);\ *SameSite=(Lax|Strict|None)(.*$) \1\3 if no_same_site_uas
    # Log whether the no_same_site_uas ACL has been hit 
    http-request set-header samesitesupport samesite_notsupported if no_same_site_uas
    http-request set-header samesitesupport samesite_supported if !no_same_site_uas
    # We need a dummy backend in order to be able to rewrite the loadbalancer cookies
    use_backend dummy_backend

#--------------------------------------------------------------------
#  frontend public ips localhost
#  traffic coming back from the dummy backend ends up here
# -------------------------------------------------------------------
frontend local_ip
    bind 127.0.0.1:81 accept-proxy
    acl valid_vhost hdr(host) -f /etc/haproxy/acls/validvhostsunrestricted.acl
    acl stagingvhost hdr(host) -i -M -f /etc/haproxy/maps/backendsstaging.map 
    acl stagingcookie req.cook(staging) -m str true
    use_backend %[req.hdr(host),lower,map(/etc/haproxy/maps/backendsstaging.map)] if stagingvhost stagingcookie
    use_backend %[req.hdr(host),lower,map(/etc/haproxy/maps/backends.map)]
    option httplog
    capture request header User-agent len 256
    capture request header X-TLS-Client len 256
    capture request header samesitesupport len 32
    # Allowlist ACL
    acl allowlist src -f /etc/haproxy/acls/allowedips.acl
    # Blocklist ACL
    acl blocklist src -f /etc/haproxy/acls/blockedips.acl
    # Measure and log the request rate per 10s
    http-request track-sc0 src table st_httpreqs_per_ip
    http-request capture sc_http_req_rate(0) len 4
    # Create an ACL when the request rate exceeds {{ haproxy_max_request_rate }} per 10s
    acl exceeds_max_request_rate_per_ip sc_http_req_rate(0) gt {{ haproxy_max_request_rate }}
    # Measure and log the request rate per path and ip 
    http-request track-sc1 base32+src table st_httpreqs_per_ip_and_path
    http-request capture sc_http_req_rate(1) len 4
    # Some paths allow for a higher ratelimit. These are in a seperate mapfile
    http-request set-var(req.rate_limit)  path,map_beg(/etc/haproxy/maps/ratelimits.map,{{ haproxy_max_request_rate_ip_path }})
    http-request set-var(req.request_rate)  sc_http_req_rate(1)
    # Create an ACL when the request rate per host header url path and src ip exceeds {{ haproxy_max_request_rate_ip_path }} per 1m
    acl exceeds_max_request_rate_per_ip_and_path var(req.rate_limit),sub(req.request_rate) lt 0
    # Deny the request when the ip address is on the blocklist
    http-request deny if blocklist
    # Deny the request when no valid host header is used
    http-request deny if ! valid_vhost
    # Deny the request when the request rate exceeds {{ haproxy_max_request_rate }} per 10s
    http-request deny deny_status 429 if exceeds_max_request_rate_per_ip !allowlist
    # Deny the request when the request rate per host header url path and src ip exceeds {{ haproxy_max_request_rate_ip_path }} per 1 m 
    http-request deny deny_status 429 if exceeds_max_request_rate_per_ip_and_path !allowlist
    # Create some http redirects
    {% if haproxy_securitytxt_target_url is defined %}
    acl securitytxt path /.well-known/security.txt
    http-request redirect location {{ haproxy_securitytxt_target_url }} if securitytxt
    {% endif %}
    http-request redirect location %[req.hdr(host),lower,map(/etc/haproxy/maps/redirects.map)] if { req.hdr(host),lower,map_str(/etc/haproxy/maps/redirects.map) -m found }

{% if haproxy_sni_ip_restricted is defined %}
#--------------------------------------------------------------------
##  frontend restricted applications
## -------------------------------------------------------------------
frontend internet_restricted_ip

    bind {{ haproxy_sni_ip_restricted.ipv4 }}:443 ssl {% for certs in haproxy_sni_ip_restricted.certs %} crt /etc/pki/haproxy/{{ certs.name }}_haproxy.pem {% endfor %} no-sslv3 no-tlsv10 no-tlsv11 alpn h2,http/1.1 transparent 
    bind {{ haproxy_sni_ip_restricted.ipv6 }}:443 ssl  {% for certs in haproxy_sni_ip_restricted.certs %} crt /etc/pki/haproxy/{{ certs.name }}_haproxy.pem {% endfor %} no-sslv3 no-tlsv10 no-tlsv11 alpn h2,http/1.1 transparent 
    bind {{ haproxy_sni_ip_restricted.ipv4 }}:80 transparent
    bind {{ haproxy_sni_ip_restricted.ipv6 }}:80 transparent
    # Logging is done in the local_ip_restriced backend, otherwise all requests are logged twice
    no log
    # We add the X-Forward-For header here
    option forwardfor except 127.0.0.0/8
    # Rewrite requests
    # We want to log the tls cipher, tls protocol and the http version
    http-request add-header X-TLS-Client %[ssl_fc_cipher],%[ssl_fc_protocol],%[ssl_fc_alpn]
    # First we strip any Proxy or X-Forwarded-for headers
    http-request del-header Proxy
    http-request del-header X-Forwarded-For
    # We redirect all port 80 to port 443
    http-request redirect scheme https code 301 if !{ ssl_fc }
    # Log the user agent in the httplogs
    capture request header User-agent len 256 
    # Put the useragent header in a variable, shared between request and response. 
    http-request set-var(txn.useragent) req.fhdr(User-Agent)
    # The ACL below makes sure only supported http methods are allowed
    acl valid_method method {{ haproxy_supported_http_methods }}
    http-request deny deny_status 405 if !valid_method
    # Create ACLs to make samesite=origin execeptions for unsupported browsers
    # See https://www.chromium.org/updates/same-site/incompatible-clients
    acl no_same_site_uas var(txn.useragent) -m reg -f /etc/haproxy/maps/nosamesitebrowsers.lst
    # Rewrite responses
    # Set HSTS on all outgoing responses
    http-response set-header Strict-Transport-Security {{ haproxy_hsts_value }}
    # Add samesite=none to all outgoing cookies except for unsupported browsers,
    # or when the SameSite cookie attribute is already present
    http-response replace-header Set-Cookie (?i)(^(?!.*samesite).*$) \1;\ SameSite=None if !no_same_site_uas
    # Remove an already present SameSite cookie attribute for unsupported browsers
    http-response replace-value Set-Cookie (^.*)(?i);\ *SameSite=(Lax|Strict|None)(.*$) \1\3 if no_same_site_uas
    # Log whether the no_same_site_uas ACL has been hit
    http-request set-header samesitesupport samesite_notsupported if no_same_site_uas
    http-request set-header samesitesupport samesite_supported if !no_same_site_uas
    # We need a dummy backend in order to be able to rewrite the loadbalancer cookies
    use_backend dummy_backend_restricted

#--------------------------------------------------------------------
#  frontend restricted ip addresses localhost
#  traffic coming back from the dummy backend ends up here
# -------------------------------------------------------------------
frontend localhost_restricted    
    bind 127.0.0.1:82 accept-proxy
    acl valid_vhost hdr(host) -f /etc/haproxy/acls/validvhostsrestricted.acl
    acl stagingvhost hdr(host) -i -M -f /etc/haproxy/maps/backendsstaging.map 
    acl stagingcookie req.cook(staging) -m str true
    use_backend %[req.hdr(host),lower,map(/etc/haproxy/maps/backendsstaging.map)] if stagingvhost stagingcookie
    use_backend %[req.hdr(host),lower,map(/etc/haproxy/maps/backends.map)]
    option httplog
    capture request header User-agent len 256
    capture request header X-TLS-Client len 256
    capture request header samesitesupport len 32
    # Allowlist ACL
    acl allowlist src -f /etc/haproxy/acls/allowedips.acl
    # Blocklist ACL
    acl blocklist src -f /etc/haproxy/acls/blockedips.acl
    # Measure and log the request rate per 10s
    http-request track-sc0 src table st_httpreqs_per_ip
    http-request capture sc_http_req_rate(0) len 4
    # Create an ACL when the request rate exceeds {{ haproxy_max_request_rate }} per 10s
    acl exceeds_max_request_rate_per_ip sc_http_req_rate(0) gt {{ haproxy_max_request_rate }}
    http-request deny deny_status 429 if exceeds_max_request_rate_per_ip !allowlist
    # Measure and log the request rate per path and ip 
    http-request track-sc1 base32+src table st_httpreqs_per_ip_and_path
    http-request capture sc_http_req_rate(1) len 4
    # Some paths allow for a higher ratelimit. These are in a seperate mapfile
    http-request set-var(req.rate_limit)  path,map_beg(/etc/haproxy/maps/ratelimits.map,{{ haproxy_max_request_rate_ip_path }})
    http-request set-var(req.request_rate)  sc_http_req_rate(1)
    # Create an ACL when the request rate per host header url path and src ip exceeds {{ haproxy_max_request_rate_ip_path }} per 1m
    acl exceeds_max_request_rate_per_ip_and_path var(req.rate_limit),sub(req.request_rate) lt 0
    # Deny the request when the ip address is on the blocklist
    http-request deny if blocklist
    # Deny the request when no valid host header is used
    http-request deny if ! valid_vhost
    # Deny the request when the request rate exceeds {{ haproxy_max_request_rate }} per 10s
    http-request deny deny_status 429 if exceeds_max_request_rate_per_ip !allowlist
    # Deny the request when the request rate per host header url path and src ip exceeds {{ haproxy_max_request_rate_ip_path }} per 1 m 
    http-request deny deny_status 429 if exceeds_max_request_rate_per_ip_and_path !allowlist
    # Create some http redirects
    {% if haproxy_securitytxt_target_url is defined %}
    acl securitytxt path /.well-known/security.txt
    http-request redirect location {{ haproxy_securitytxt_target_url }} if securitytxt
    {% endif %}

{% endif %}
