---
- name: Create user
  user: name=teams system=yes home={{ teams_dir }} shell=/sbin/nologin

- name: Copy start script
  template: src=templates/spring-boot.j2 dest=/etc/init.d/{{ springapp_service_name }} mode=0755
  notify: restart teams

- name: enable service
  service: name=teams enabled=yes

- name: Create logging directory
  file: path=/var/log/{{ springapp_service_name }} state=directory owner=teams group=teams mode=0755

- stat: path={{ teams_dir }}/teams-current.war follow=True
  register: preDeployStat

- include: ../../../tasks/springbootapp/install-release.yml
  when: "teams_snapshot_timestamp == '' and teams_local_jar == ''"

- include: ../../../tasks/springbootapp/install-snapshot.yml
  when: "teams_snapshot_timestamp != '' and teams_local_jar == ''"

- include: ../../../tasks/springbootapp/install-local.yml
  when: "teams_local_jar != ''"

- stat: path={{ teams_dir }}/teams-current.war follow=True
  register: postDeployStat

- name: Copy logging config
  template: src=logback.xml.j2 dest={{ teams_dir }}/logback.xml owner=teams group=teams mode=0740
  notify: restart teams

- name: Copy application config
  template: src=application.properties.j2 dest={{ teams_dir }}/application.properties owner=teams group=teams mode=0740
  notify: restart teams

- name: Copy grouper client config
  template: src=grouper.client.properties.j2 dest={{ teams_dir }}/grouper.client.properties owner=teams group=teams mode=0740
  register: grouper_client_config_result
  notify: restart teams

# grouperClient.jar insists that a file called grouper.client.properties is on the classpath, so we'll put it inside the war.
- include: insert_grouper_client_props.yml
  when: grouper_client_config_result.changed or preDeployStat.stat.md5 != postDeployStat.stat.md5
  notify: restart teams

- name: copy grouper provision script for teams
  copy: src={{ item }} dest=~/{{ item }}
  with_items:
    - create-stems.gsh
  when: env == 'vm'

- name: provision grouper for teams
  shell: "bin/gsh ~/create-stems.gsh"
  register: gsh_output
  changed_when: "gsh_output.stderr != ''"
  args:
    chdir: /opt/www/grouper-shell
  when: env == 'vm'

- name: copy apache config
  template: src=teams.conf.j2 dest=/etc/httpd/conf.d/teams.conf
  notify: reload httpd

# no idea why this is necessary, as the init script returns an ok status also
# if teams is still initializing.  Waiting for the port to open works well
# though, and seems like to correct way to handle this.
- name: start the teams service
  service: name=teams state=started enabled=yes
  ignore_errors: true

- name: wait for teams to start
  wait_for: connect_timeout=30 port={{ springapp_tcpport }} state=started

- name: ensure the service is started
  service: name=teams enabled=yes state=started
