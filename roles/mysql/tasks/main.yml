---
# Add MariaDB repo and key
- name: Add MariaDB.org repository
  template:
    src: "mariadb.repo.j2"
    dest: "/etc/yum.repos.d/mariadb.repo"

- name: Install mariadb server
  yum:
    name:
      - MariaDB-server
      - MariaDB-client
      - python2-PyMySQL
    state: present
  tags:
    - mysql

- name: Start and enable mariadb
  service:
    name: mariadb
    state: started
    enabled: yes
  tags:
    - mysql

- name: Set mysql root password for all root accounts
  mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    priv: "*.*:ALL,GRANT"
    login_unix_socket: /var/lib/mysql/mysql.sock
  tags:
    - mysql

- name: MySQL my.cnf
  template:
    src: "my.cnf.j2"
    dest: "/root/.my.cnf"
    mode: 0600
    owner: root
    group: root
  tags:
    - mysql

- name: delete anonymous MySQL server user
  mysql_user:
    user: ""
    state: absent
    login_user: root
    host: "{{ mariadb_host }}"
    login_password: "{{ mysql_root_password }}"
  tags:
    - mysql

- name: delete anonymous MySQL server user for localhost
  mysql_user:
    user: ""
    state: absent
    login_user: root
    host: "{{ mariadb_host }}"
    login_password: "{{ mysql_root_password }}"
  tags:
    - mysql

- name: delete test MySQL server user
  mysql_user:
    user: "{{ item }}"
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"
  tags:
    - mysql
  with_items:
    - test
    - test_%

- name: delete anonymous MySQL server user for localhost
  mysql_user:
    user: ""
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"
  tags:
    - mysql

- name: remove the MySQL test database
  mysql_db:
    db: test
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"
  tags:
    - mysql

- name: Create database
  mysql_db:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ databases.names }}"
  tags:
    - mysql

- name: Create database user
  mysql_user:
    name: "{{ item[0].name }}"
    host: "{{ item[0].hosts | join(',') if item[0].hosts is defined and (item[0].hosts | length>0) else item[1] }}"
    password: "{{ item[0].password }}"
    priv: "{{ item[0].db_name }}.*:ALL"
    state: present
    append_privs: true
  no_log: true
  with_nested:
    - "{{ databases.users }}"
    - "{{ database_clients }}"
  tags:
    - mysql

- name: Create development database user
  mysql_user:
    name: "{{ item.name}}"
    host: "%"
    password: "{{ item.password }}"
    priv: "*.*:ALL"
    state: present
  no_log: true
  with_items:
    - "{{ databases.development_user|default([]) }}"
  when:
    - develop | bool
  tags:
    - mysql

- name: Allow external connections when in development
  lineinfile:
    dest: "/etc/my.cnf.d/server.cnf"
    insertafter: '\\[mysqld\\]'
    state: present
    line: "bind-address=0.0.0.0"
  when:
    - develop | bool
  tags:
    - mysql

# Add backup user
- name: add mariadb backup user
  mysql_user:
    name: "{{ mysql_backup_user }}"
    password: "{{ mysql_backup_password  }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"
    priv: "*.*:SELECT,LOCK TABLES,SHOW VIEW"
    state: present
  no_log: true
  when:
    - backup_node | bool

- name: Create the backup directory
  file:
    path: /home/backup
    state: directory
    owner: root
    group: root
    mode: 0700
  when:
    - backup_node | bool

- name: Put mariadb_backup script
  template:
    src: "mariadb_backup.sh.j2"
    dest: "/usr/local/sbin/mariadb_backup.sh"
    mode: 0700
    owner: root
  when:
    - backup_node | bool

- name: Create cron symlink for backup script
  file:
    src: /usr/local/sbin/mariadb_backup.sh
    dest: /etc/cron.daily/db_backup
    state: link
    mode: 0700
    owner: root
  when:
    - backup_node | bool
