---
- name: Create user
  user: name={{ springapp_user }} system=yes home={{ mujina_idp_dir }} shell=/sbin/nologin

- name: Copy systemd service file
  template: src=../../templates/spring-boot.service.j2 dest=/etc/systemd/system/{{ springapp_service_name }}.service
  notify:
    - "restart mujina-idp"

- name: Check presence of legacy init script
  stat: path=/etc/init.d/{{ springapp_service_name }}
  register: legacy_am_present

- name: Stop service when legacy init script is present
  service: name={{ springapp_service_name }} state=stopped
  when: legacy_am_present.stat.exists

- name: Clean up legacy init script
  file: path=/etc/init.d/{{ springapp_service_name }} state=absent

- name: enable mujina-idp service
  service: name={{ springapp_service_name }} enabled=yes

- name: Create logging directory
  file: path=/var/log/{{ springapp_service_name }} state=directory owner={{ springapp_user }} group={{ springapp_user }} mode=0755

- include: ../../../tasks/springbootapp/install-release.yml
  when: "mujina_idp_snapshot_timestamp == '' and mujina_idp_local_jar == ''"

- include: ../../../tasks/springbootapp/install-snapshot.yml
  when: "mujina_idp_snapshot_timestamp != '' and mujina_idp_local_jar == ''"

- include: ../../../tasks/springbootapp/install-local.yml
  when: "mujina_idp_local_jar != ''"

- name: Copy logging config
  template: src=logback.xml.j2 dest={{ mujina_idp_dir }}/logback.xml owner={{ springapp_user }} group={{ springapp_user }} mode=0740
  notify: restart mujina-idp

- name: Copy application config
  template: src=application.yml.j2 dest={{ mujina_idp_dir }}/application.yml owner={{ springapp_user }} group={{ springapp_user }} mode=0740
  notify: restart mujina-idp

- name: remove old apache config
  file: path=/etc/httpd/conf.d/mujina-idp.conf state=absent

- name: copy apache config
  template: src=mujina_idp.conf.j2 dest=/etc/httpd/conf.d/mujina_idp.conf
  notify: reload httpd

- name: ensure the service is started
  service: name={{ springapp_service_name }} enabled=yes state=started

- name: cleanup old jars
  shell: 'find . ! -name $(basename $(readlink mujina-idp-current.jar)) -name "*.jar" -type f -printf "%T@  %p\n"  | sort -rn | awk ''{print $2}'' | tail -n +2 | xargs --no-run-if-empty rm -v'
  args:
    chdir: "{{ mujina_idp_dir }}" 
  register: clean_mujina_idp_jars
  changed_when: '"removed" in clean_mujina_idp_jars'
