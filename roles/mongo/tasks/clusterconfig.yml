---
- name: Check if hosts are in clustered
  ansible.builtin.shell: mongosh --port {{ mongod_port }} --quiet --eval 'db.isMaster().hosts'
  register: check_cluster
  changed_when: false
  check_mode: false

- name: Set fact for roles
  ansible.builtin.set_fact:
    mongo_primary: "{{ mongo_replication_role == 'primary' }}"
    mongo_secondary: "{{ mongo_replication_role == 'secondary' }}"
    mongo_arbiter: "{{ mongo_replication_role == 'arbiter' }}"

- name: Build member list
  ansible.builtin.set_fact:
    members: >-
      {{
        members | default([]) +
        [{
          'host': item  ,
          'priority': member_weight[hostvars[item].mongo_replication_role]
        }]
      }}
  loop: "{{ ansible_play_hosts }}"
  run_once: true
  vars:
    member_weight:
      primary: 3
      secondary: 2
      arbiter: 1

- name: Set fact for arbiter index number
  ansible.builtin.set_fact:
    arbiter_index: "{{ hostid }}"
  when: hostvars[item].mongo_arbiter
  loop: "{{ ansible_play_hosts }}"
  loop_control:
    index_var: hostid

- name: Initial cluster initialisation
  community.mongodb.mongodb_replicaset:
    login_host: localhost
    login_user: admin
    login_port: "{{ mongod_port }}"
    login_password: "{{ mongo_admin_password }}"
    replica_set: "{{ replica_set_name }}"
    members: "{{ members }}"
    arbiter_at_index: "{{ arbiter_index | default(omit) }}"
    validate: false
  run_once: true
  when: mongo_replication_role == 'primary'

- name: Wait until cluster health is ok
  community.mongodb.mongodb_status:
    login_user: admin
    login_password: "{{ mongo_admin_password }}"
    login_database: admin
    login_port: "{{ mongod_port }}"
    validate: default
    poll: 5
    interval: 12
    replica_set: "{{ replica_set_name }}"
  when: mongo_replication_role == 'primary'

- name: Add the admin user
  community.mongodb.mongodb_user:
    database: admin
    name: admin
    password: "{{ mongo_admin_password }}"
    login_port: "{{ mongod_port }}"
    roles: root
    state: present
  when: check_cluster.stdout == ""
  no_log: true
  run_once: true
