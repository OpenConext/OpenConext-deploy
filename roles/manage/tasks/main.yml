---
- name: Create metadata directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: "0750"
  with_items:
    - "/opt/openconext/manage/metadata_configuration"
    - "/opt/openconext/manage/metadata_templates"

- name: Import the mongo CA file
  ansible.builtin.copy:
    src: "{{ inventory_dir }}/secrets/mongo/mongoca.pem"
    dest: "/opt/openconext/manage"
    owner: root
    mode: "0644"

- name: copy invite certificate
  ansible.builtin.copy:
    src: "{{ inventory_dir }}/files/certs/invite/public_key.pem"
    dest: "/opt/openconext/manage/public_invite_key.pem"
    owner: root
    group: root
    mode: "0640"
  notify:
    - "restart manageserver"

- name: Place the serverapplication configfiles
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /opt/openconext/manage/{{ item }}
    owner: root
    group: root
    mode: "0644"
  with_items:
    - application.yml
    - logback.xml
    - manage-api-users.yml
  notify: restart manageserver

- name: Place old __cacert_entrypoint.sh script
  ansible.builtin.copy:
    src: "__cacert_entrypoint.sh"
    dest: "/opt/openconext/manage"
    owner: "root"
    group: "root"
    mode: "0755"

- name: copy metadata configuration
  ansible.builtin.template:
    src: "metadata_configuration/{{ item }}.schema.json.j2"
    dest: "/opt/openconext/manage/metadata_configuration/{{ item }}.schema.json"
    owner: root
    group: root
    mode: "0640"
  with_items:
    - "{{ manage_tabs_enabled }}"
  notify:
    - "restart manageserver"

- name: copy metadata templates
  copy:
    src: "metadata_templates/{{ item }}.template.json"
    dest: "/opt/openconext/manage/metadata_templates/{{ item }}.template.json"
    owner: root
    group: root
    mode: "0640"
  with_items:
    - "{{ manage_tabs_enabled }}"
  notify:
    - "restart manageserver"

- name: Add the mongodb docker network to the list of networks when MongoDB runs in Docker
  ansible.builtin.set_fact:
    manage_docker_networks:
      - name: loadbalancer
      - name: openconext_mongodb
  when: mongodb_in_docker | default(false) | bool
- name: Add the MariaDB docker network to the list of networks when MariaDB runs in Docker
  ansible.builtin.set_fact:
    manage_docker_networks:
      - name: loadbalancer
      - name: openconext_mariadb
  when: mariadb_in_docker | default(false) | bool

- name: Create and start the server container
  community.docker.docker_container:
    name: manageserver
    image: ghcr.io/openconext/openconext-manage/manage-server:{{ manage_server_version }}
    entrypoint: /__cacert_entrypoint.sh
    pull: true
    restart_policy: "always"
    state: started
    networks: "{{ manage_docker_networks }}"
    mounts:
      - source: /opt/openconext/manage/
        target: /config/
        type: bind
      - source: /opt/openconext/manage/mongoca.pem
        target: /certificates/mongoca.crt
        type: bind
      - source: /opt/openconext/manage/__cacert_entrypoint.sh
        target: /__cacert_entrypoint.sh
        type: bind
    command: "java -jar /app.jar -Xmx512m --spring.config.location=./config/"
    etc_hosts:
      host.docker.internal: host-gateway
    env:
      USE_SYSTEM_CA_CERTS: "true"
      TZ: "{{ timezone }}"
    hostname: manage
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/internal/health",
        ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
  register: manageservercontainer

- name: Create the gui container
  community.docker.docker_container:
    name: managegui
    image: ghcr.io/openconext/openconext-manage/manage-gui:{{ manage_gui_version }}
    pull: true
    restart_policy: "always"
    state: started
    networks:
      - name: "loadbalancer"
    labels:
      traefik.http.routers.managegui.rule: "Host(`manage.{{ base_domain }}`)"
      traefik.http.routers.managegui.tls: "true"
      traefik.enable: "true"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost/internal/health"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    hostname: managegui
    env:
      HTTPD_CSP: "{{ httpd_csp.lenient_with_static_img }}"
      HTTPD_SERVERNAME: "manage.{{ base_domain }}"
      OPENCONEXT_INSTANCENAME: "{{ instance_name }}"
      OPENCONEXT_ENGINE_LOGOUT_URL: "https://engine.{{ base_domain }}/logout"
      OPENCONEXT_HELP_EMAIL: "{{ support_email }}"
      SHIB_ENTITYID: "https://manage.{{ base_domain }}/shibboleth"
      SHIB_REMOTE_ENTITYID: "https://engine.{{ base_domain }}/authentication/idp/metadata"
      SHIB_REMOTE_METADATA: "{{ shibboleth_metadata_sources.engine }}"
    mounts:
      - source: /etc/localtime
        target: /etc/localtime
        type: bind
      - source: /opt/openconext/common/favicon.ico
        target: /var/www/favicon.ico
        type: bind
