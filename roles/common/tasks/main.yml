---
- name: set timezone
  file:
    state: link
    src: "/usr/share/zoneinfo/{{ timezone }}"
    dest: "/etc/localtime"
    force: True

- name: check that hostname and fqdn are set up correctly
  command: "/usr/bin/hostname --fqdn"
  any_errors_fatal: true
  changed_when: false

- name: Add Epel repo
  yum:
    name: epel-release.noarch
    state: present

- name: Install tools / clients
  yum:
    name: 
      - telnet
      - sudo
      - unzip
      - bzip2
      - python3
    state: present
  register: common_tools_installed
  until: common_tools_installed is succeeded

- name: Install CentOS7 packages
  yum:
    name: 
      - ntp
  when: ansible_distribution_major_version == '7'

- name: Install CentOS8 / Rocky 8 packages
  yum:
    name: 
      - chrony
  when: ansible_distribution_major_version == '8' or ansible_distribution_major_version == '9'

- name: Install git on development vm
  yum:
    name: git
    state: present
  register: common_git_tools_installed
  until: common_git_tools_installed is succeeded
  when:
    - develop | bool

# TODO: proper SElinux support.  Would require at least to explicitly open up
# all non-standard apache ports (9876, loadbalancing.engine.port, etc)
# we don't use the standard ansible selinux module, because it is way to
# limited in how it handles systems without SELinux binaries or SELinux
# support (like test)
- name: check for presence of SELinux config file
  stat:
    path: /etc/sysconfig/selinux
  register: selinux_config

- name: check for presence of SELinux binaries
  stat:
    path: /usr/sbin/setenforce
  register: selinux_binaries

- name: check if SELinux is enabled
  shell: "/usr/sbin/sestatus | awk -F': *' '$1~/SELinux status/ {print $2}'"
  when:
    - selinux_binaries.stat.exists
  register: selinux_enabled
  changed_when: false

- name: check SELinux mode
  shell: "/usr/sbin/sestatus | awk -F': *' '$1~/Current mode/ {print $2}'"
  when:
    - selinux_binaries.stat.exists and selinux_enabled.stdout == 'enabled'
  register: selinux_mode
  changed_when: false

- name: set SELinux mode to permissive
  lineinfile:
    dest: "/etc/sysconfig/selinux"
    state: present
    regexp: "^SELINUX="
    line: "SELINUX=permissive"
  when:
    - selinux_config.stat.exists

- name: disable SELinux NOW
  command: /usr/sbin/setenforce 0
  when:
    - selinux_binaries.stat.exists and selinux_enabled.stdout == 'enabled' and selinux_mode.stdout != 'permissive'

- name: check SELinux status
  shell: "/usr/sbin/sestatus | awk -F': *' '$1~/Current mode|SELinux status/ {print $2; q}'|grep -qE 'disabled|permissive'"
  when:
    - selinux_binaries.stat.exists
  changed_when: false

- name: Start ntpd
  service:
    name: ntpd
    state: started
    enabled: yes
  when: ansible_distribution_major_version == '7'

- name: Start chrony
  service:
    name: chronyd
    state: started
    enabled: yes
  when: ansible_distribution_major_version == '8' or ansible_distribution_major_version == '9'

- name: Remove exim,sendmail when Postfix needs to be installed
  yum:
    name:
      - exim
      - sendmail
      - sendmail-cf
    state: absent
  register: common_mail_uninstalled
  until: common_mail_uninstalled is succeeded
  when:
    - sendmail_smarthost is defined

- name: Install Postfix
  yum:
    name:
      - postfix
    state: present
  register: common_postfix_installed
  until: common_postfix_installed is succeeded
  when:
    - sendmail_smarthost is defined

- name: Copy Postfix main.cf template
  template:
    src: "main.cf.j2"
    dest: "/etc/postfix/main.cf"
  when:
    - sendmail_smarthost is defined
  notify:
    - "reload postfix"

- name: Copy Postfix pseudo-email config
  template:
    src: "{{ item }}.j2"
    dest: "/etc/postfix/{{ item }}"
  when: sendmail_smarthost is defined and handle_pseudo_email
  with_items:
    - mysql-pseudo.cf
    - header_checks
  notify:
    - "reload postfix"
    - "rebuild header_checks"

- name: start and enable Postfix
  service: 
    name: postfix
    enabled: yes
    state: started

# journald binary logs corrupt on specific engineblock messages.
# disabling compression fixes that issue
- name: Disable journald compression
  copy:
    src: "journald.conf"
    dest: "/etc/systemd/journald.conf"
  notify:
    - "restart journald"
  when: ansible_distribution_major_version == '7'
