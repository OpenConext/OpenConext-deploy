---
- name: Create directory to keep configfile
  ansible.builtin.file:
    dest: "/opt/openconext/access"
    state: directory
    owner: root
    group: root
    mode: "0770"

- name: Place the serverapplication configfiles
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /opt/openconext/access/{{ item }}
    owner: root
    group: root
    mode: "0644"
  with_items:
    - serverapplication.yml
  register: serverconfigfiles

- name: Place the mockapplication configfiles
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /opt/openconext/access/{{ item }}
    owner: root
    group: root
    mode: "0644"
  with_items:
    - mockapplication.yml
  register: mockconfigfiles

- name: Create and start the server container
  community.docker.docker_container:
    name: openconextaccessserver
    image: ghcr.io/openconext/openconext-access/accessserver:{{ access_server_version }}
    pull: true
    restart_policy: "always"
    state: started
    networks:
      - name: "loadbalancer"
    mounts:
      - source: /opt/openconext/access/serverapplication.yml
        target: /application.yml
        type: bind
    command: '--spring.config.location=./'
    log_driver: local
    etc_hosts:
      host.docker.internal: host-gateway
  when: not serverconfigfiles.changed

- name: Create and (re)start the server container
  community.docker.docker_container:
    name: openconextaccessserver
    image: ghcr.io/openconext/openconext-access/accessserver:{{ access_server_version }}
    pull: true
    restart_policy: "always"
    state: started
    restart: true
    networks:
      - name: "loadbalancer"
    mounts:
      - source: /opt/openconext/access/serverapplication.yml
        target: /application.yml
        type: bind
    command: '--spring.config.location=./'
    log_driver: local
    etc_hosts:
      host.docker.internal: host-gateway
  when: serverconfigfiles.changed

- name: Create the client container
  community.docker.docker_container:
    name: accessclient
    image: ghcr.io/openconext/openconext-access/accessclient:{{ access_client_version }}
    pull: true
    restart_policy: "always"
    state: started
    networks:
      - name: "loadbalancer"
    labels:
      traefik.http.routers.accessclient.rule: "Host(`access.{{ base_domain }}`)"
      traefik.http.routers.accessclient.tls: "true"
      traefik.enable: "true"

- name: Create the welcome container
  community.docker.docker_container:
    name: accesswelcome
    image: ghcr.io/openconext/openconext-access/accessswelcome:{{ access_welcome_version }}
    pull: true
    restart_policy: "always"
    state: started
    networks:
      - name: "loadbalancer"
    labels:
      traefik.http.routers.accesswelcome.rule: "Host(`welcome.{{ base_domain }}`)"
      traefik.http.routers.accesswelcome.tls: "true"
      traefik.enable: "true"

- name: Create and start the mock provisioning container
  community.docker.docker_container:
    name: accesssprovisioningmock
    image: ghcr.io/openconext/openconext-access/accesssprovisioningmock:{{ access_mock_version }}
    pull: true
    restart_policy: "always"
    state: started
    command: '--spring.config.location=./'
    mounts:
      - source: /opt/openconext/access/mockapplication.yml
        target: /application.yml
        type: bind
    networks:
      - name: "loadbalancer"
    labels:
      traefik.http.routers.accessmock.rule: "Host(`mock.{{ base_domain }}`)"
      traefik.http.routers.accessmock.tls: "true"
      traefik.http.services.accessmock.loadbalancer.server.port: "8081"
      traefik.enable: "true"
  when: not mockconfigfiles.changed

- name: Create and (re)start the mock provisioning container
  community.docker.docker_container:
    name: accesssprovisioningmock
    image: ghcr.io/openconext/openconext-access/accesssprovisioningmock:{{ access_mock_version }}
    pull: true
    restart_policy: "always"
    restart: true
    state: started
    command: '--spring.config.location=./'
    mounts:
      - source: /opt/openconext/access/mockapplication.yml
        target: /application.yml
        type: bind
    networks:
      - name: "loadbalancer"
    labels:
      traefik.http.routers.accessmock.rule: "Host(`mock.{{ base_domain }}`)"
      traefik.http.routers.accessmock.tls: "true"
      traefik.http.services.accessmock.loadbalancer.server.port: "8081"
      traefik.enable: "true"
  when: mockconfigfiles.changed

- name: Include the role manage_provision_entities to provision access client to Manage
  ansible.builtin.include_role:
    name: manage_provision_entities
  vars:
    entity_type: oidc10_rp

- name: Include the role manage_provision_entities to provision access client to Manage
  ansible.builtin.include_role:
    name: manage_provision_entities
  vars:
    entity_type: oauth20_rs
