---
- name: Include Rocky specific tasks
  ansible.builtin.include_tasks: setup-rocky.yml
  when: ansible_os_family == 'RedHat'

- name: Include Debian specific tasks
  ansible.builtin.include_tasks: setup-debian.yml
  when: ansible_os_family == 'Debian'

- name: Install docker
  ansible.builtin.package:
    name: docker-ce
    state: present

- name: Install docker config file
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: "0744"
  notify: "restart docker"

- name: Start and enable the docker daemon
  ansible.builtin.systemd:
    name: docker
    state: started
    enabled: true

- name: Gather some facts, as we want to need info on the docker network interface
  ansible.builtin.setup:
    gather_subset: network

- name: Create the traefik configuration file directory
  ansible.builtin.file:
    state: directory
    path: "/opt/openconext/traefik/{{ item }}"
    owner: root
    mode: "0755"
  with_items:
    - config
    - certs
  when: docker_install_traefik | bool

- name: Place the traefik configuration file
  ansible.builtin.template:
    src: traefik.yaml.j2
    dest: /opt/openconext/traefik/config/traefik.yaml
    owner: root
    mode: "0640"
  when: docker_install_traefik | bool

- name: Place the dynamic configuration
  ansible.builtin.copy:
    src: router.yaml
    dest: /opt/openconext/traefik/config/router.yaml
    owner: root
    mode: "0640"
  when: docker_install_traefik | bool

- name: Create Traefik backend key
  ansible.builtin.copy:
    content: "{{ backend_tls_key }}"
    dest: "/opt/openconext/traefik/certs/backend.key"
    mode: "0600"
    owner: root
  when: docker_install_traefik | bool

- name: Create SSL certificate
  ansible.builtin.copy:
    src: "{{ inventory_dir }}/files/certs/backend.{{ base_domain }}.pem"
    dest: "/opt/openconext/traefik/certs/backend.crt"
    owner: root
    mode: "0644"
  when: docker_install_traefik | bool

- name: Create the Traefik loadbalancer network
  community.docker.docker_network:
    name: loadbalancer
  when: docker_install_traefik | bool

- name: Create the Traefik loadbalancer
  community.docker.docker_container:
    name: loadbalancer
    image: traefik:latest
    published_ports: "{{ docker_traefik_ports }}"
    pull: true
    restart_policy: "always"
    networks:
      - name: "loadbalancer"
    command: "--configFile=/config/config/traefik.yaml"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/openconext/traefik/:/config/
    comparisons:
      published_ports: strict
      networks: strict
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 1m
      timeout: 10s
      retries: 3
  when: docker_install_traefik | bool

- name: Place the iptables file
  ansible.builtin.template:
    src: ip4tables.sh.j2
    dest: /usr/local/sbin/ip4tables.sh
    mode: "0750"
    owner: root

- name: Disable the default iptables service
  ansible.builtin.systemd:
    service: iptables
    enabled: false
  when: ansible_os_family == 'RedHat'

- name: Disable the netfilter-persistent service
  ansible.builtin.systemd:
    service: netfilter-persistent
    enabled: false
  when: ansible_os_family == 'Debian'

- name: Place the new systemd service file
  ansible.builtin.copy:
    src: iptablesdocker.service
    dest: /etc/systemd/system/
    owner: root
    mode: "0755"

- name: Enable and start the new firewall service
  ansible.builtin.systemd:
    service: iptablesdocker.service
    enabled: true
    state: started

- name: Create OpenConext common files dir
  ansible.builtin.file:
    state: directory
    path: "/opt/openconext/common/"
    owner: root
    mode: "0755"

- name: Check if a favicon exists
  ansible.builtin.stat:
    path: "{{ inventory_dir }}/files/favicon.ico"
  delegate_to: localhost
  register: favicon_present
  become: false

- name: Place the favicon file
  ansible.builtin.copy:
    src: "{{ inventory_dir }}/files/favicon.ico"
    dest: /opt/openconext/common/favicon.ico
    owner: root
    group: root
    mode: "0644"
  when: "favicon_present | bool"

- name: Check if an eduid favicon exists
  ansible.builtin.stat:
    path: "{{ inventory_dir }}/files/favicon-eduid.ico"
  delegate_to: localhost
  register: favicon_eduid_present
  become: false

- name: Place the eduid favicon file
  ansible.builtin.copy:
    src: "{{ inventory_dir }}/files/favicon-eduid.ico"
    dest: /opt/openconext/common/favicon-eduid.ico
    owner: root
    group: root
    mode: "0644"
  when: "favicon_eduid_present | bool"

- name: Create docker prune job
  ansible.builtin.cron:
    name: "docker prune"
    user: "root"
    minute: "23"
    hour: "03"
    job: "docker system prune -a -f"
    cron_file: "docker_prune"
