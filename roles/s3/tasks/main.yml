---
# S3 role using SeaweedFS
# Based on https://github.com/HarryKodden/SeaWeedFS-HA-Demo

- name: Include OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"
  tags:
  - s3
  - s3-install

- name: Install required packages
  ansible.builtin.package:
    name: "{{ s3_packages }}"
    state: present
  tags:
  - s3
  - s3-install

- name: Create required directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  with_items:
  - "/opt/openconext/seaweedfs"
  - "/opt/openconext/seaweedfs/config"
  - "/opt/openconext/seaweedfs/data/master1"
  - "/opt/openconext/seaweedfs/data/master2"
  - "/opt/openconext/seaweedfs/data/master3"
  - "/opt/openconext/seaweedfs/data/volume1"
  - "/opt/openconext/seaweedfs/data/volume2"
  - "/opt/openconext/seaweedfs/data/volume3"
  - "/opt/openconext/seaweedfs/data/filer"
  tags:
  - s3
  - s3-install

- name: Create S3 JSON configuration
  ansible.builtin.template:
    src: s3.json.j2
    dest: "/opt/openconext/seaweedfs/config/s3.json"
    owner: root
    group: root
    mode: "0644"
  tags:
  - s3
  - s3-config

# Deploy master nodes
- name: Create and start master1 container
  community.docker.docker_container:
    name: master1
    image: chrislusf/seaweedfs:latest
    pull: true
    restart_policy: "always"
    state: started
    networks:
    - name: "loadbalancer"
    command: "master -port=9333 -ip=master1 -mdir=/data -peers=master1:9333,master2:9333,master3:9333"
    volumes:
    - "/opt/openconext/seaweedfs/data/master1:/data"
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://master1:9333/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  tags:
  - s3
  - s3-deploy

- name: Create and start master2 container
  community.docker.docker_container:
    name: master2
    image: chrislusf/seaweedfs:latest
    pull: true
    restart_policy: "always"
    state: started
    networks:
    - name: "loadbalancer"
    command: "master -port=9333 -ip=master2 -mdir=/data -peers=master1:9333,master2:9333,master3:9333"
    volumes:
    - "/opt/openconext/seaweedfs/data/master2:/data"
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://master2:9333/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  tags:
  - s3
  - s3-deploy

- name: Create and start master3 container
  community.docker.docker_container:
    name: master3
    image: chrislusf/seaweedfs:latest
    pull: true
    restart_policy: "always"
    state: started
    networks:
    - name: "loadbalancer"
    command: "master -port=9333 -ip=master3 -mdir=/data -peers=master1:9333,master2:9333,master3:9333"
    volumes:
    - "/opt/openconext/seaweedfs/data/master3:/data"
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://master3:9333/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  tags:
  - s3
  - s3-deploy

# Deploy volume nodes
- name: Create and start volume1 container
  community.docker.docker_container:
    name: volume1
    image: chrislusf/seaweedfs:latest
    pull: true
    restart_policy: "always"
    state: started
    networks:
    - name: "loadbalancer"
    command: "volume -port=8080 -ip=volume1 -mserver=master1:9333,master2:9333,master3:9333 -dir=/data -max=5 -rack=rack1"
    volumes:
    - "/opt/openconext/seaweedfs/data/volume1:/data"
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://volume1:8080/status" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  tags:
  - s3
  - s3-deploy

- name: Create and start volume2 container
  community.docker.docker_container:
    name: volume2
    image: chrislusf/seaweedfs:latest
    pull: true
    restart_policy: "always"
    state: started
    networks:
    - name: "loadbalancer"
    command: "volume -port=8080 -ip=volume2 -mserver=master1:9333,master2:9333,master3:9333 -dir=/data -max=5 -rack=rack1"
    volumes:
    - "/opt/openconext/seaweedfs/data/volume2:/data"
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://volume2:8080/status" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  tags:
  - s3
  - s3-deploy

- name: Create and start volume3 container
  community.docker.docker_container:
    name: volume3
    image: chrislusf/seaweedfs:latest
    pull: true
    restart_policy: "always"
    state: started
    networks:
    - name: "loadbalancer"
    command: "volume -port=8080 -ip=volume3 -mserver=master1:9333,master2:9333,master3:9333 -dir=/data -max=5 -rack=rack1"
    volumes:
    - "/opt/openconext/seaweedfs/data/volume3:/data"
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://volume3:8080/status" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  tags:
  - s3
  - s3-deploy

# Deploy filer
- name: Create and start filer container
  community.docker.docker_container:
    name: filer
    image: chrislusf/seaweedfs:latest
    pull: true
    restart_policy: "always"
    state: started
    networks:
    - name: "loadbalancer"
    command: "filer -master=master1:9333,master2:9333,master3:9333 -ip=0.0.0.0 -port=8888 -dataCenter=dc1 -maxMB=1024"
    volumes:
    - "/opt/openconext/seaweedfs/data/filer:/data"
    labels:
      traefik.http.routers.filer.rule: "Host(`filer.{{ base_domain }}`)"
      traefik.http.routers.filer.tls: "true"
      traefik.enable: "true"
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8888/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  tags:
  - s3
  - s3-deploy

# Deploy S3 API endpoint
- name: Create and start S3 container
  community.docker.docker_container:
    name: s3
    image: chrislusf/seaweedfs:latest
    pull: true
    restart_policy: "always"
    state: started
    networks:
    - name: "loadbalancer"
    command: "s3 -filer=filer:8888 -ip.bind=0.0.0.0 -port=8333 -config=/etc/seaweedfs/s3.json"
    volumes:
    - "/opt/openconext/seaweedfs/config/s3.json:/etc/seaweedfs/s3.json:ro"
    labels:
      traefik.http.routers.s3.rule: "Host(`s3.{{ base_domain }}`)"
      traefik.http.routers.s3.tls: "true"
      traefik.enable: "true"
    healthcheck:
      test: [ "CMD", "sh", "-c", "netstat -tlnp | grep :8333" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
  tags:
  - s3
  - s3-deploy
