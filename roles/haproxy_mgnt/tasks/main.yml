---
- name: Check if the patchproces is running, except when called from the patchproces
  stat:
    path: /tmp/patchprocesstarted
  register: patch_process_started

- block:
    - name: End the play if the patchprocess is running
      debug:
        msg: "The patchprocess is running. No loadbalancer management allowed"
    - meta: end_play
  when: patch_process_started.stat.exists and skip_patch_check is not defined

# Set the fact weight_blue as an integer. The value is the 100 minus value of the supplied
# variable "weight_red".
- set_fact:
    weight_blue: "{{ 100 - weight_red }}"

- name: Create list with labels and weights as dictionaries
  set_fact:
    server_labels_with_weights: "{{ server_labels_with_weights + [{ 'label': item.label, 'weight': (weight_red if item.color == 'red' else weight_blue) }] }}"
  loop: "{{ docker_blauwrood_servers }}"

- name: debug
  debug:
    msg: "{{server_labels_with_weights }}"

- name: get new weight for haproxy hosts
  haproxy_commands:
    java_blauwrood_servers: "{{ java_blauwrood_servers }}"
    php_blauwrood_servers: "{{ php_blauwrood_servers }}"
    static_blauwrood_servers: "{{ static_blauwrood_servers }}"
    stepup_blauwrood_servers: "{{ stepup_blauwrood_servers }}"
    docker_blauwrood_servers: "{{ docker_blauwrood_servers }}"
    weight: "{{ weight }}"
    color: "{{ color }}"
    app_name: "{{ app_name }}"
    app_type: "{{ app_type }}"
  when: weight is defined
  register: haproxy_weights

- name: get new state for haproxy hosts
  haproxy_commands:
    java_blauwrood_servers: "{{ java_blauwrood_servers }}"
    php_blauwrood_servers: "{{ php_blauwrood_servers }}"
    static_blauwrood_servers: "{{ static_blauwrood_servers }}"
    stepup_blauwrood_servers: "{{ stepup_blauwrood_servers }}"
    docker_blauwrood_servers: "{{ docker_blauwrood_servers }}"
    color: "{{ color }}"
    state: "{{ state }}"
    app_name: "{{ app_name }}"
    app_type: "{{ app_type }}"
  when: state is defined
  register: haproxy_states

- name: dump weight output
  debug:
    msg: "{{ haproxy_weights.haproxy_items }}"
  when: weight is defined

- name: dump state output
  debug:
    msg: "{{ haproxy_states.haproxy_items }}"
  when: state is defined

- name: set weights for haproxy hosts
  haproxy:
    state: enabled
    host: "{{ item.host }}"
    fail_on_not_found: yes
    socket: /var/lib/haproxy/haproxy.stats
    weight: "{{ item.weight }}"
    backend: "{{ item.backend }}"
  with_items: "{{ haproxy_weights.haproxy_items }}"
  when: weight is defined

- name: set state for haproxy hosts
  haproxy:
    state: "{{ item.state }}"
    host: "{{ item.host }}"
    fail_on_not_found: yes
    socket: /var/lib/haproxy/haproxy.stats
    backend: "{{ item.backend }}"
  with_items: "{{ haproxy_states.haproxy_items }}"
  when: state is defined

- name: Write the state to the correct state file
  shell: echo "show servers state" | socat /var/lib/haproxy/haproxy.stats - > /var/lib/haproxy/state
