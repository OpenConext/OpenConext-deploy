---
- name: Extract list of application names
  ansible.builtin.set_fact:
    app_names: "{{ haproxy_applications | map(attribute='name') | list }}"

- name: Check if dynamic_input exists in haproxy_applications
  ansible.builtin.set_fact:
    app_exists: "{{ app_name in app_names }}"

- name: Fail if dynamic_input does not exist in haproxy_applications
  ansible.builtin.fail:
    msg: "The application '{{ app_name }}' does not exist in haproxy_applications. Available applications are: {{ app_names | join(', ') }}"
  when: not app_exists

- name: Set the complementing weight
  ansible.builtin.set_fact:
    weight_complementing: "{{ 100 - weight | int }}"

- name: Get the server list from the servers configured in haproxy_applications
  ansible.builtin.set_fact:
    selected_servers: "{{ (haproxy_applications | selectattr('name', 'equalto', app_name) | map(attribute='servers') | first) }}"

- name: Check if the patchproces is running, except when called from the patchproces
  ansible.builtin.stat:
    path: /tmp/patchprocesstarted
  register: patch_process_started

- block:
    - name: End the play if the patchprocess is running
      ansible.builtin.debug:
        msg: "The patchprocess is running. No loadbalancer management allowed"
    - ansible.builtin.meta: end_play
  when: patch_process_started.stat.exists and skip_patch_check is not defined

- name: Create an empty list
  ansible.builtin.set_fact:
    server_labels_with_weights: []

- name: Create list with labels and weights as dictionaries
  ansible.builtin.set_fact:
    server_labels_with_weights: "{{ server_labels_with_weights + [{ 'label': item.label, 'weight': (weight if  item[app_filter]  ==  app_filtervalue  else weight_complementing) }] }}"
  loop: "{{ selected_servers }}"

- name: Show the created list
  ansible.builtin.debug:
    msg: "{{ server_labels_with_weights }}"

- name: Set weights for haproxy hosts
  community.general.haproxy:
    state: enabled
    host: "{{ item.label }}"
    fail_on_not_found: true
    socket: /var/lib/haproxy/haproxy.stats
    weight: "{{ item.weight }}%"
    backend: "{{ app_name }}_be"
  with_items: "{{ server_labels_with_weights }}"
  register: "haproxy_weights"

- name: Write the state to the correct state file
  ansible.builtin.shell: echo "show servers state" | socat /var/lib/haproxy/haproxy.stats - > /var/lib/haproxy/state
  when: "haproxy_weights.changed"
