---
# playbook loops over:
# loadbalancers
#     haproxy_applications (item)
#
# and does an url request on lodbalancer ip with vhostname as the host header

- name: Try to reach {{ item.vhost_name }} via https://{{ haproxy_sni_ip_restricted.ipv4 }}:443 # noqa: name[template] jinja template helps with debugging
  when: item.restricted is defined and item.restricted
  ansible.builtin.uri:
    url: "https://{{ haproxy_sni_ip_restricted.ipv4 }}:443/{{ item.ha_url }}"
    method: GET
    status_code: [200, 302]
    return_content: false
    validate_certs: false
    headers:
      host: "{{ item.vhost_name }}"
  register: result
  until: result.status == 200 or result.status == 302
  retries: 3
  delay: 2
  delegate_to: 127.0.0.1 # run check from deploy host

# Try to reach applications via loadbalancer without restricted ip v4
- name: Try to reach {{ item.vhost_name }} via https://{{ haproxy_sni_ip.ipv4 }}:443 # noqa: name[template] jinja template helps with debugging
  when: item.restricted is undefined
  ansible.builtin.uri:
    url: "https://{{ haproxy_sni_ip.ipv4 }}:443/{{ item.ha_url }}"
    method: GET
    status_code: [200, 302]
    return_content: false
    validate_certs: false
    headers:
      host: "{{ item.vhost_name }}"
  register: result
  until: result.status == 200 or result.status == 302
  retries: 3
  delay: 2
  delegate_to: 127.0.0.1 #run check from deploy host
