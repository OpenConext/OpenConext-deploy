---
- name: Try to reach {{ item.vhost_name }} via https://{{ haproxy_sni_ip_restricted_ipv4 }}:443
  when: item.restricted is defined and item.restricted and location in group_names
  ansible.builtin.uri:
    url: "https://{{ haproxy_sni_ip_restricted_ipv4 }}:443/internal/health"
    method: GET
    status_code: [200, 302]
    return_content: no
    validate_certs: false
    headers:
      host: "{{ item.vhost_name }}"
  register: result
  until: result.status == 200 or result.status == 302
  retries: 3
  delay: 1
  delegate_to: 127.0.0.1
  ignore_errors: true

- name: Create a variable for {{ item.vhost_name }} to append to the results
  when: result.status is defined
  ansible.builtin.set_fact:
    resultstring: "{{ ansible_hostname }}: vhost {{ item.vhost_name }} via https://{{ haproxy_sni_ip_restricted_ipv4 }}:443 returns status code {{ result.status }}"

- name: Append {{ item.vhost_name }} variable to list
  when: resultstring is defined
  ansible.builtin.set_fact:
    results: "{{ results + [ resultstring ] }}"

- name: Try to reach {{ item.vhost_name }} via https://{{ haproxy_sni_ip_ipv4 }}:443
  when: item.restricted is undefined and location in group_names
  ansible.builtin.uri:
    url: "https://{{ haproxy_sni_ip_ipv4 }}:443/internal/health"
    method: GET
    status_code: [200, 302]
    return_content: no
    validate_certs: false
    headers:
      host: "{{ item.vhost_name }}"
  register: result
  until: result.status == 200 or result.status == 302
  retries: 3
  delay: 1
  delegate_to: 127.0.0.1
  ignore_errors: true

- name: Create a variable for {{ item.vhost_name }} to append to the results
  when: result.status is defined
  ansible.builtin.set_fact:
    resultstring: "{{ ansible_hostname }}: vhost {{ item.vhost_name }} via https://{{ haproxy_sni_ip_restricted_ipv4 }}:443 returns status code {{ result.status }}"

- name: Append {{ item.vhost_name }} variable to list
  when: resultstring is defined
  ansible.builtin.set_fact:
    results: "{{ results + [ resultstring ] }}"
