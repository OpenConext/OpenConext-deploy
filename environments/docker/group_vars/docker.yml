---
env: vm

smtp_server: localhost
error_mail_to: devnull@example.org

php_display_errors: 1

databases:
  names:
    - teams
    - api
    - "{{ engine_database_name }}"
    - "{{ janus_database_name }}"
    - grouper
    - authz-server
    - pdp-server
    - oidc-server
    - aaserver
  users:
    - name: teamsrw
      db_name: teams
      password: "{{ mysql_passwords.teams }}"
    - name: apirw
      db_name: api
      password: "{{ mysql_passwords.api }}"
    - name: "{{ engine_database_user }}"
      db_name: "{{ engine_database_name }}"
      password: "{{ mysql_passwords.eb }}"
    - name: "{{ janus_database_user }}"
      db_name: "{{ janus_database_name }}"
      password: "{{ mysql_passwords.sr }}"
    - name: grouperrw
      db_name: grouper
      password: "{{ mysql_passwords.grouper }}"
    - name: authz-serverrw
      db_name: authz-server
      password: "{{ mysql_passwords.authz_server }}"
    - name: pdp-serverrw
      db_name: pdp-server
      password: "{{ mysql_passwords.pdp_server }}"
    - name: oidc-serverrw
      db_name: oidc-server
      password: "{{ mysql_passwords.oidc_server }}"
    - name: aa-serverrw
      db_name: aaserver
      password: "{{ mysql_passwords.aa_server }}"
  development_user:
    - name: development
      password: development

tls_https:
  - name: star
    key_name: "star.{{ base_domain }}.key"
    crt_name: "star.{{ base_domain }}.pem"
    bundle_name: "star.{{ base_domain }}_ca_bundle.pem"
    key_content: "{{ https_star_private_key }}"

tls:
  cert_path: /etc/pki/tls/certs
  cert_path_ca: /etc/pki/ca-trust/source/anchors
  cert_private_path: /etc/pki/tls/private

tls_ca: star.{{ base_domain }}_ca.pem

tls_star_cert_haproxy: star.{{ base_domain }}_haproxy.pem
tls_star_cert_bundle_name: star.{{ base_domain }}_ca_bundle.pem
tls_star_cert: star.{{ base_domain }}.pem
tls_star_cert_key: star.{{ base_domain }}.key

apache_server_admin: unix@prolocation.net

janus_version: 1.22.0
janus_ssp_version: 1.13.2
janus_ssp_technicalcontact_name: "Surfconext beheer"
janus_ssp_technicalcontact_email: "surfconext-beheer@surfnet.nl"
janus_ssp_managingcontact_name: "Surfconext beheer"
janus_ssp_managingcontact_email: "surfconext-beheer@surfnet.nl"
janus_ssp_title_suffix: "SURFconext VM"

engine_version: "5.0.0"
engine_idp_debugging_email_address: coin-logs-dev@list.surfnet.nl

engine_janus_user: engineblock

engine_database_name: eb
engine_database_host: localhost
engine_database_port: 3306
engine_database_user: ebrw
engine_database_password: "{{ mysql_passwords.eb }}"

engine_ldap_host: localhost
engine_ldap_bind_dn: "cn=engine,dc=surfconext,dc=nl"
engine_apache_environment: vm
engine_apache_symfony_environment: prod

ldap_suffix: "dc=surfconext,dc=nl"
ldap_admin_user: cn=admin,dc=surfconext,dc=nl
ldap_grouper_user: gadget
grouper_ldap_host: localhost

janus_database_name: sr
janus_database_host: localhost
janus_database_user: srrw
janus_database_password: "{{ mysql_passwords.sr }}"

janus_teams_oauth_key: https://teams.{{ base_domain }}/.*

engine_janus_cache_lifetime: 0

engine_vovalidate_key: oauth_key

engine_trusted_proxy_ips:
  - 127.0.0.1

engine_keys:
  default:
    privateFile: /etc/openconext/engineblock.pem
    publicKey: engineblock.crt
    publicFile: /etc/openconext/engineblock.crt

engine_block:
  metadataRepositories:
    - index: 0
      type: "janus"
      value: "JanusRestV1"

profile_version: 0.3.0
#profile_branch: develop
profile_apache_symfony_environment: prod
# Engine's assertion signing certificate:
engine_profile_idp_certificate:

tomcat_apps:
  - grouper
  - mujina-sp
  - mujina-idp
  - oidc

# shibboleth
shibboleth_apps:
  teams:
    entityID: "https://teams.{{ base_domain }}/shibboleth"
    baseurl: ""
  grouper:
    entityID: "https://grouper.{{ base_domain }}/grouper/shibboleth"
    baseurl: "/grouper"
  authz:
    entityID: "https://authz.{{ base_domain }}/shibboleth"
    baseurl: ""
  "authz-admin":
    entityID: "https://authz-admin.{{ base_domain }}/shibboleth"
    baseurl: ""
  pdp:
    entityID: "https://pdp.{{ base_domain }}/shibboleth"
    baseurl: ""
  aa:
    entityID: "https://aa.{{ base_domain }}/shibboleth"
    baseurl: ""

shib:
  engine_domain: "{{ base_domain }}"

mujina_version: 4.1.1

##
# VM config for the teams app
##
teams:
  db_name: "teams"
  db_user: "teamsrw"
  db_password: "{{ mysql_passwords.teams }}"
  db_host: "{{ mysql_host }}"
  group_name_context: "urn:collab:group:demo.openconext.org:"

teams_version: 4.2.13
teams_debug: false

engineblock:
  idp_url: https://engine.{{ base_domain }}/authentication/idp/single-sign-on
  idp_entity_id: https://engine.{{ base_domain }}/authentication/idp/metadata

##
# VM config for the api app
##
api:
  bundle_name: "{{ tls_https.bundle_name }}"
  janus:
    user: "{{ engine_janus_user }}"
    secret: "{{ engine_janus_secret }}"
    uri: https://serviceregistry.{{ base_domain }}/simplesaml/module.php/janus/services/rest/
  jdbc:
    user: apirw
    url: jdbc:mysql://{{ mysql_host }}:3306/api
    password: "{{ mysql_passwords.api }} "
  ldap:
    url: ldap://ldap.{{ base_domain }}:389
    userDn: "{{ engine_ldap_bind_dn }}"
    password: "{{ engine_ldap_password }}"
  engineblock:
    user: "{{ engine_database_user }}"
    url: jdbc:mysql://{{ engine_database_host }}:3306/{{ engine_database_name }}
    password: "{{ engine_database_password }}"
  teams:
    user: teamsrw
    url: jdbc:mysql://{{ mysql_host }}:3306/teams
    password: "{{ mysql_passwords.teams }}"
  oauth:
    callback_url: https://api.{{ base_domain }}/v1/test/oauth-callback.shtml
  staticContentBasePath: https://static.{{ base_domain }}
  saml:
    entityId: https://api.{{ base_domain }}/
    assertionConsumerURI: https://api.{{ base_domain }}/v1/assertionConsumer
  ehcache:
    path: /tmp

##
# VM config for the grouper app
##
grouper:
  db_user: grouperrw
  db_host: "{{ mysql_host }}"
  db_password: "{{ mysql_passwords.grouper }}"
  database_name: grouper

ldap_user: cn=ro,dc=surfconext,dc=nl
ldap_grouper_engine_user: engine

##
# VM config for the Authorization Server
##
authzserver:
  db_user: authz-serverrw
  db_password: "{{ mysql_passwords.authz_server }}"
  db_host: "{{ mysql_host }}"
  db_name: authz-server

authz_server_version: 1.3.7
authz_server_debug: false

##
# VM config for the Voot app
##
voot:
  authz_checkToken_endpoint_url: "https://authz.{{ base_domain }}/oauth/check_token"
  authz_checkToken_clientId: "vootservice"
  authz_checkToken_secret: "{{ voot_authz_checkToken_secret }}"
  oidc_checkToken_endpoint_url: "https://oidc.{{ base_domain }}/introspect"
  oidc_checkToken_clientId: "http@//mock-sp"
  oidc_checkToken_secret: "{{ voot_oidc_checkToken_secret }}"
  loggers:
    - { name: "voot", level: "DEBUG" }
  externalGroupProviders:
    - {
        type: "grouper",
        url: "https://grouper.vm.openconext.org/grouper-ws/services/GrouperService_v2_0",
        credentials: {
          username: "{{ ldap_grouper_user }}",
          secret: "{{ external_group_provider_secrets.grouper }}"
        },
        schacHomeOrganization: "surfnet.nl",
        name: "SURFteams",
        timeoutMillis: 3000
      }
voot_version: 2.0.4
voot_debug: false

##
# VM config for the authz-admin application
##
authz_admin_version: 2.0.10
authz_admin_group: urn:collab:group:surfnet.nl:etc:sysadmingroup
authz_admin_debug: false
authzadmin:
  defaultClients:
      - clientId: "{{ authzplayground.springapp_authz_client_id }}"
        secret: "{{ authzplayground.springapp_authz_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
        grantTypes:
          - authorization_code
          - implicit
          - client_credentials
        redirectUri: https://authz-playground.{{ base_domain }}/redirect
      - clientId: authz-admin
        secret: "{{ authz_admin_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
        grantTypes:
          - authorization_code
        redirectUri: https://authz-admin.{{ base_domain }}
        autoApprove: true
      - clientId: surf-teams
        secret: "{{ teams_authz_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
        grantTypes:
          - client_credentials
      - clientId: engineblock
        secret: "{{ engineblock_authz_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
        grantTypes:
          - client_credentials
      - clientId: csa_client
        secret: "{{ csa_authz_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
        grantTypes:
          - client_credentials
      - clientId: dashboard
        secret: "{{ dashboards_authz_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
          - actions
          - cross-idp-services
          - stats
        grantTypes:
          - authorization_code
          - implicit
          - client_credentials
      - clientId: pdp_client
        secret: "{{ pdp_client_secret }}"
        resourceIds:
          - groups
        scopes:
          - groups
        grantTypes:
          - authorization_code
          - implicit
          - client_credentials
      - clientId: "{{ aa.authz_client_id }}"
        secret: "{{ aa_authz_client_secret }}"
        scopes:
          - groups
          - attribute-aggregation
          - saml-attribute-query
        grantTypes:
          - authorization_code
          - implicit
          - client_credentials
  defaultResourceServers:
    - clientId: vootservice
      secret: "{{ voot.authz_checkToken_secret }}"
    - clientId: csa
      secret: "{{ csa_resource_checking_secret }}"
    - clientId: pdp
      secret: "{{ voot.oidc_checkToken_secret }}"
    - clientId: "{{ aa.authz_resource_server_id }}"
      secret: "{{ aa.authz_secret }}"

##
# VM config for the authz-admin application
##
authz_playground_version: 1.4
authz_playground_debug: false
authzplayground:
  springapp_authz_client_id: cool_app_id
  springapp_authz_client_secret: "{{ authzplayground_springapp_authz_client_secret }}"
  springapp_oidc_client_id: http@//mock-sp
  springapp_oidc_client_secret: "{{ authzplayground_springapp_oidc_client_secret }}"

pdp_version: 1.2.4
#pdp_snapshot_timestamp: "20160623.074125-2"
#pdp_html_snapshot_timestamp: "20160623.074205-2"

pdp_debug: true
pdp:
  username: "pdp_admin"
  password: "{{ pdp_password }}"
  db_user: pdp-serverrw
  db_password: "{{ mysql_passwords.pdp_server }}"
  db_host: "{{ mysql_host }}"
  db_name: pdp-server
  spring_profiles_active: test
  cache_policies: false
  sab_username: coin-test
  sab_password: "{{ pdp_sab_password }}"
  sab_endpoint: https://sab-ng.surfnet.nl/simplesaml/module.php/attributes/server.php

aa_version: 1.0.3

aa_debug: false
aa:
  eb_username: "eb"
  eb_password: "{{ aa_eb_password }}"
  db_user: aa-serverrw
  db_password: "{{ mysql_passwords.aa_server }}"
  db_host: "{{ mysql_host }}"
  db_name: aaserver
  authz_client_id: "https@//aa.test.surfconext.nl"
  authz_resource_server_id: aa
  authz_secret: "{{ aa_authz_client_secret }}"
  idin_client_id: am_aa_client
  idin_secret: "{{ aa_idin_client_secret }}"
  oidc_client_id: "https@//aa.surfconext.test.nl"
  oidc_secret: "{{ aa_oidc_client_secret }}"
  spring_profiles_active: acc
  sab_username: coin-test
  sab_password: "{{ aa_sab_password }}"
  sab_endpoint: https://sab-ng.surfnet.nl/simplesaml/module.php/attributes/server.php
  aggregate_cache: 0

oidc_version: 1.0.2
oidc:
  environment: vm
  issuer: https://oidc.{{ base_domain }}/
  db_user: oidc-serverrw
  db_password: "{{ mysql_passwords.oidc_server }}"
  db_host: "{{ mysql_host }}"
  db_name: oidc-server
  sp_entity_id: https://oidc.{{ base_domain }}

metadata_exporter_version: 2.0.3
metadata_exporter:
  db_user: srrw
  db_password: "{{ mysql_passwords.sr }}"
  db_host: "{{ mysql_host }}"
  db_name: sr
  password: "{{ metadata_exporter_password }}"

springapp_tcpport_error_handling: 9199

loadbalancing:
  engine:
    port: 401
    heartbeat:
      url: /
      method: GET
    servers: [
      { label: "engine_backend", ip: "192.168.66.99" }
    ]

  profile:
    port: 402
    heartbeat: { url: "/favicon.ico", method: "HEAD" }
    servers: [
      { label: "profile_backend", ip: "192.168.66.99" }
    ]

  static:
    port: 403
    heartbeat: { url: "/media/alive.txt", method: "HEAD" }
    servers: [
      { label: "static_backend", ip: "192.168.66.99" }
    ]

  serviceregistry:
    port: 404
    heartbeat: { url: "/", method: "HEAD" }
    servers: [
      { label: "serviceregistry_backend", ip: "192.168.66.99" }
    ]

  engine_api:
    port: 405
    heartbeat: { url: "/", method: "GET" }
    servers: [
      { label: "engine_backend", ip: "192.168.66.99" }
    ]

  teams:
    port: 601
    heartbeat: { url: "/media/trans-white.png", method: "GET" }
    servers: [
      { label: "teams_backend", ip: "192.168.66.99" }
    ]

  authzserver:
    port: 602
    heartbeat: { url: "/health", method: "GET" }
    servers: [
      { label: "authz_backend", ip: "192.168.66.99" }
    ]

  authz_admin:
    port: 603
    heartbeat: { url: "/health", method: "GET" }
    servers: [
      { label: "authz_admin_backend", ip: "192.168.66.99" }
    ]

  authz_playground:
    port: 604
    heartbeat: { url: "/health", method: "GET" }
    servers: [
      { label: "authz_playground_backend", ip: "192.168.66.99" }
    ]

  voot:
    port: 605
    heartbeat: { url: "/health", method: "GET" }
    servers: [
      { label: "voot_backend", ip: "192.168.66.99" }
    ]

  grouper:
    port: 606
    heartbeat: { url: "/grouper/", method: "HEAD" }
    servers: [
      { label: "grouper_backend", ip: "192.168.66.99" }
    ]

  mujina_sp:
    port: 607
    heartbeat: { url: "/", method: "HEAD" }
    servers: [
      { label: "mujina_sp_backend", ip: "192.168.66.99" }
    ]

  mujina_idp:
    port: 608
    heartbeat: { url: "/", method: "HEAD" }
    servers: [
      { label: "mujina_idp_backend", ip: "192.168.66.99" }
    ]

  welcome:
    port: 609
    heartbeat: { url: "/", method: "GET" }
    servers:
      - label: welcome_backend
        ip: 192.168.66.99

  oidc:
    port: 614
    heartbeat: { url: "/", method: "HEAD" }
    servers: [
      { label: "oidc_backend", ip: "192.168.66.99" }
    ]

  pdp:
    port: 613
    heartbeat:
      url: /pdp/api/health
      method: GET
    servers:
      - label: pdp_backend
        ip: 127.0.0.1

  aa:
    port: 615
    heartbeat:
      url: /aa/api/health
      method: GET
    servers:
      - label: aa_backend
        ip: 127.0.0.1

  metadata_exporter:
    port: 616
    heartbeat:
      url: /health
      method: GET
    servers:
      - label: metadata_exporter_backend
        ip: 127.0.0.1

haproxy_applications:
  - name: multidata
    vhost_name: multidata
    ip: 127.0.0.1
    ha_method: GET
    ha_url: /health
    port: 616
    servers: "{{ java_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"

  - name:  pdp
    vhost_name: pdp
    ip: 127.0.0.1
    ha_method: GET
    ha_url: /pdp/api/info
    port: 613
    servers: "{{ java_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"

  - name:  teams
    vhost_name: teams
    ip: 127.0.0.1
    ha_method: GET
    ha_url: "/media/trans-white.png"
    port: 601
    servers: "{{ java_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"

  - name:  authzserver
    vhost_name: authz
    ip: 127.0.0.1
    ha_method: GET
    ha_url: "/health"
    port: 602
    servers: "{{ java_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"

  - name:  authz_admin
    vhost_name: authz_admin
    ip: 127.0.0.1
    ha_method: GET
    ha_url: "/health"
    port: 603
    servers: "{{ java_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"

  - name: authz_playground
    vhost_name: authz_playground
    ip: 127.0.0.1
    ha_method: GET
    ha_url: "/health"
    port: 604
    servers: "{{ java_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"
   
  - name: voot
    vhost_name: voot
    ip: 127.0.0.1
    ha_method: GET
    ha_url: "/health"
    port: 605
    servers: "{{ java_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"
  
  - name: grouper
    vhost_name: voot
    ip: 127.0.0.1
    ha_method: GET
    ha_url: "/grouper-ws/status?diagnosticType=db"
    port: 606
    servers: "{{ java_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"
  
  - name: engine
    vhost_name: engine
    ip: 127.0.0.1
    ha_method: GET
    ha_url: /
    port: 401
    servers: "{{ php_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"

  - name: profile
    vhost_name: profile
    ip: 127.0.0.1
    ha_method: GET
    ha_url: /
    port: 402
    servers: "{{ php_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"
  
  - name: serviceregistry
    vhost_name: serviceregistry
    ip: 127.0.0.1
    ha_method: HEAD
    ha_url: /
    port: 404
    servers: "{{ php_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"

  - name: engine_api
    vhost_name: engine-api
    ip: 127.0.0.1
    ha_method: GET
    ha_url: /
    port: 405
    servers: "{{ php_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"

  - name: static
    vhost_name: static
    ip: 127.0.0.1
    ha_method: HEAD
    ha_url: /media/alive.txt
    port: 403
    servers: "{{ php_servers }}"
    crt_name: "{{ tls_star_cert }}"
    key_name: "{{ tls_star_cert_key }}"

haproxy_sni_ip: 127.0.0.1

java_servers:
   - ip: 127.0.0.1
     label: d01
php_servers:
   - ip: 127.0.0.1
     label: phpapps

